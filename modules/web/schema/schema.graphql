# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

schema {
  query: Query
  mutation: Mutation
}

directive @dictionary(subgraph: String) on FIELD_DEFINITION

directive @httpOperation(subgraph: String, path: String, operationSpecificHeaders: ObjMap, httpMethod: HTTPMethod, isBinary: Boolean, requestBaseBody: ObjMap, queryParamArgMap: ObjMap, queryStringOptionsByParam: ObjMap, jsonApiFields: Boolean) on FIELD_DEFINITION

directive @transport(subgraph: String, kind: String, location: String, headers: ObjMap, queryStringOptions: ObjMap, queryParams: ObjMap) on OBJECT

type Query {
  """returns unstructured resource from a namespace"""
  handleGetResource(
    """kind of the resource"""
    kind: String!
    """name of the resource"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """namespace of the resource"""
    namespace: String!
  ): unstructured_Unstructured @httpOperation(subgraph: "api", path: "/api/v1/_raw/{args.kind}/name/{args.name}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/_raw/{args.kind}/namespace/{args.namespace}/name/{args.name}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of available protocols for the service"""
  handleGetAvailableProtocols(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): deployment_Protocols @httpOperation(subgraph: "api", path: "/api/v1/appdeployment/protocols", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of ClusterRoles"""
  handleGetClusterRoleList(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): clusterrole_ClusterRoleList @httpOperation(subgraph: "api", path: "/api/v1/clusterrole", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about ClusterRole"""
  handleGetClusterRoleDetail(
    """name of the ClusterRole"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): clusterrole_ClusterRoleDetail @httpOperation(subgraph: "api", path: "/api/v1/clusterrole/{args.name}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of ClusterRoleBindings"""
  handleGetClusterRoleBindingList(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): clusterrolebinding_ClusterRoleBindingList @httpOperation(subgraph: "api", path: "/api/v1/clusterrolebinding", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about ClusterRoleBinding"""
  handleGetClusterRoleBindingDetail(
    """name of the ClusterRoleBinding"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): clusterrolebinding_ClusterRoleBindingDetail @httpOperation(subgraph: "api", path: "/api/v1/clusterrolebinding/{args.name}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of ConfigMaps in a namespaces"""
  handleGetConfigMapList(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """namespace of the ConfigMap"""
    namespace: String!
  ): configmap_ConfigMapList @httpOperation(subgraph: "api", path: "/api/v1/configmap", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/configmap/{args.namespace}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about ConfigMap"""
  handleGetConfigMapDetail(
    """namespace of the ConfigMap"""
    namespace: String!
    """name of the ConfigMap"""
    configmap: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): configmap_ConfigMapDetail @httpOperation(subgraph: "api", path: "/api/v1/configmap/{args.namespace}/{args.configmap}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of CustomResourceDefinition"""
  handleGetCustomResourceDefinitionList(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): types_CustomResourceDefinitionList @httpOperation(subgraph: "api", path: "/api/v1/crd", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about CustomResourceDefinition"""
  handleGetCustomResourceDefinitionDetail(
    """name of the CustomResourceDefinition"""
    crd: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): types_CustomResourceDefinitionDetail @httpOperation(subgraph: "api", path: "/api/v1/crd/{args.crd}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of objects of CustomResourceDefinition"""
  handleGetCustomResourceObjectList(
    """namespace of the custom resource"""
    namespace: String!
    """name of the CustomResourceDefinition"""
    crd: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): types_CustomResourceObjectList @httpOperation(subgraph: "api", path: "/api/v1/crd/{args.namespace}/{args.crd}/object", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about custom resource object"""
  handleGetCustomResourceObjectDetail(
    """namespace of the custom resource"""
    namespace: String!
    """name of the CustomResourceDefinition"""
    crd: String!
    """name of the custom resource object"""
    object: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): types_CustomResourceObjectDetail @httpOperation(subgraph: "api", path: "/api/v1/crd/{args.namespace}/{args.crd}/{args.object}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns Events for custom resource object"""
  handleGetCustomResourceObjectEvents(
    """namespace of the custom resource"""
    namespace: String!
    """name of the CustomResourceDefinition"""
    crd: String!
    """name of the custom resource object"""
    object: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): common_EventList @httpOperation(subgraph: "api", path: "/api/v1/crd/{args.namespace}/{args.crd}/{args.object}/event", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of CronJobs in a namespaces"""
  handleGetCronJobList(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """namespace of the CronJob"""
    namespace: String!
  ): cronjob_CronJobList @httpOperation(subgraph: "api", path: "/api/v1/cronjob", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/cronjob/{args.namespace}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about CronJob"""
  handleGetCronJobDetail(
    """namespace of the CronJob"""
    namespace: String!
    """name of the CronJob"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): cronjob_CronJobDetail @httpOperation(subgraph: "api", path: "/api/v1/cronjob/{args.namespace}/{args.name}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Events for CronJob"""
  handleGetCronJobEvents(
    """namespace of the CronJob"""
    namespace: String!
    """name of the CronJob"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): common_EventList @httpOperation(subgraph: "api", path: "/api/v1/cronjob/{args.namespace}/{args.name}/event", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Jobs for CronJob"""
  handleGetCronJobJobs(
    """namespace of the CronJob"""
    namespace: String!
    """name of the CronJob"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """filter related Jobs by active status"""
    active: String
  ): job_JobList @httpOperation(subgraph: "api", path: "/api/v1/cronjob/{args.namespace}/{args.name}/job", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\",\"active\":\"active\"}")
  """generates a one-time CSRF token that can be used by POST request"""
  handleGetCsrfToken(
    """action name to generate CSRF token for"""
    action: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): csrf_Response @httpOperation(subgraph: "api", path: "/api/v1/csrftoken/{args.action}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of DaemonSets in a namespaces"""
  handleGetDaemonSetList(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """namespace of the DaemonSet"""
    namespace: String!
  ): daemonset_DaemonSetList @httpOperation(subgraph: "api", path: "/api/v1/daemonset", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/daemonset/{args.namespace}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about DaemonSet"""
  handleGetDaemonSetDetail(
    """namespace of the DaemonSet"""
    namespace: String!
    """name of the DaemonSet"""
    daemonSet: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): daemonset_DaemonSetDetail @httpOperation(subgraph: "api", path: "/api/v1/daemonset/{args.namespace}/{args.daemonSet}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Events for DaemonSet"""
  handleGetDaemonSetEvents(
    """namespace of the DaemonSet"""
    namespace: String!
    """name of the DaemonSet"""
    daemonSet: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): common_EventList @httpOperation(subgraph: "api", path: "/api/v1/daemonset/{args.namespace}/{args.daemonSet}/event", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Pods for DaemonSet"""
  handleGetDaemonSetPods(
    """namespace of the DaemonSet"""
    namespace: String!
    """name of the DaemonSet"""
    daemonSet: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): pod_PodList @httpOperation(subgraph: "api", path: "/api/v1/daemonset/{args.namespace}/{args.daemonSet}/pod", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Services for DaemonSet"""
  handleGetDaemonSetServices(
    """namespace of the DaemonSet"""
    namespace: String!
    """name of the DaemonSet"""
    daemonSet: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): service_ServiceList @httpOperation(subgraph: "api", path: "/api/v1/daemonset/{args.namespace}/{args.daemonSet}/service", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Deployments in a namespaces"""
  handleGetDeployments(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """namespace of the Deployment"""
    namespace: String!
  ): deployment_DeploymentList @httpOperation(subgraph: "api", path: "/api/v1/deployment", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/deployment/{args.namespace}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about Deployment"""
  handleGetDeploymentDetail(
    """namespace of the Deployment"""
    namespace: String!
    """name of the Deployment"""
    deployment: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): deployment_DeploymentDetail @httpOperation(subgraph: "api", path: "/api/v1/deployment/{args.namespace}/{args.deployment}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Events for Deployment"""
  handleGetDeploymentEvents(
    """namespace of the Deployment"""
    namespace: String!
    """name of the Deployment"""
    deployment: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): common_EventList @httpOperation(subgraph: "api", path: "/api/v1/deployment/{args.namespace}/{args.deployment}/event", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of new ReplicaSets for Deployment"""
  handleGetDeploymentNewReplicaSet(
    """namespace of the Deployment"""
    namespace: String!
    """name of the Deployment"""
    deployment: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): replicaset_ReplicaSet @httpOperation(subgraph: "api", path: "/api/v1/deployment/{args.namespace}/{args.deployment}/newreplicaset", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of old ReplicaSets for Deployment"""
  handleGetDeploymentOldReplicaSets(
    """namespace of the Deployment"""
    namespace: String!
    """name of the Deployment"""
    deployment: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): replicaset_ReplicaSetList @httpOperation(subgraph: "api", path: "/api/v1/deployment/{args.namespace}/{args.deployment}/oldreplicaset", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Events in a namespace"""
  handleGetEventList(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """namespace to get Events from"""
    namespace: String!
  ): common_EventList @httpOperation(subgraph: "api", path: "/api/v1/event", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/event/{args.namespace}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of HorizontalPodAutoscalers in a namespaces"""
  handleGetHorizontalPodAutoscalerList(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """namespace of the HorizontalPodAutoscaler"""
    namespace: String!
  ): horizontalpodautoscaler_HorizontalPodAutoscalerList @httpOperation(subgraph: "api", path: "/api/v1/horizontalpodautoscaler", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/horizontalpodautoscaler/{args.namespace}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about HorizontalPodAutoscaler"""
  handleGetHorizontalPodAutoscalerDetail(
    """namespace of the HorizontalPodAutoscaler"""
    namespace: String!
    """name of the HorizontalPodAutoscaler"""
    horizontalpodautoscaler: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): horizontalpodautoscaler_HorizontalPodAutoscalerDetail @httpOperation(subgraph: "api", path: "/api/v1/horizontalpodautoscaler/{args.namespace}/{args.horizontalpodautoscaler}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Ingresses in a namespaces"""
  handleGetIngressList(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """namespace of the Ingress"""
    namespace: String!
  ): ingress_IngressList @httpOperation(subgraph: "api", path: "/api/v1/ingress", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/ingress/{args.namespace}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Events for Ingress"""
  handleGetIngressEvent(
    """namespace of the Ingress"""
    namespace: String!
    """name of the Ingress"""
    ingress: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): common_EventList @httpOperation(subgraph: "api", path: "/api/v1/ingress/{args.namespace}/{args.ingress}/event", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about Ingress"""
  handleGetIngressDetail(
    """namespace of the Ingress"""
    namespace: String!
    """name of the Ingress"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): ingress_IngressDetail @httpOperation(subgraph: "api", path: "/api/v1/ingress/{args.namespace}/{args.name}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of IngressClasses"""
  handleGetIngressClassList(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): ingressclass_IngressClassList @httpOperation(subgraph: "api", path: "/api/v1/ingressclass", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about IngressClass"""
  handleGetIngressClass(
    """name of the IngressClass"""
    ingressclass: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): ingressclass_IngressClass @httpOperation(subgraph: "api", path: "/api/v1/ingressclass/{args.ingressclass}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  handleGetState(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): JSON @httpOperation(subgraph: "api", path: "/api/v1/integration/{name}/state", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Jobs in a namespaces"""
  handleGetJobList(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """namespace of the Job"""
    namespace: String!
  ): job_JobList @httpOperation(subgraph: "api", path: "/api/v1/job", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/job/{args.namespace}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about Job"""
  handleGetJobDetail(
    """namespace of the Job"""
    namespace: String!
    """name of the Job"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): job_JobDetail @httpOperation(subgraph: "api", path: "/api/v1/job/{args.namespace}/{args.name}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Events for Job"""
  handleGetJobEvents(
    """namespace of the Job"""
    namespace: String!
    """name of the Job"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): common_EventList @httpOperation(subgraph: "api", path: "/api/v1/job/{args.namespace}/{args.name}/event", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Pods for Job"""
  handleGetJobPods(
    """namespace of the Job"""
    namespace: String!
    """name of the Job"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): pod_PodList @httpOperation(subgraph: "api", path: "/api/v1/job/{args.namespace}/{args.name}/pod", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a text file with logs from a Container"""
  handleLogFile(
    """namespace of the Pod"""
    namespace: String!
    """name of the Pod"""
    pod: String!
    """name of container in the Pod"""
    container: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): [Int] @httpOperation(subgraph: "api", path: "/api/v1/log/file/{args.namespace}/{args.pod}/{args.container}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns log sources for a resource"""
  handleLogSource(
    """namespace of the resource"""
    namespace: String!
    """name of the resource"""
    resourceName: String!
    """type of the resource"""
    resourceType: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): controller_LogSources @httpOperation(subgraph: "api", path: "/api/v1/log/source/{args.namespace}/{args.resourceName}/{args.resourceType}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns logs from a Container"""
  handleLogs(
    """namespace of the Pod"""
    namespace: String!
    """name of the Pod"""
    pod: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """name of container in the Pod"""
    container: String!
  ): logs_LogDetails @httpOperation(subgraph: "api", path: "/api/v1/log/{args.namespace}/{args.pod}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/log/{args.namespace}/{args.pod}/{args.container}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Namespaces"""
  handleGetNamespaces(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): namespace_NamespaceList @httpOperation(subgraph: "api", path: "/api/v1/namespace", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about Namespace"""
  handleGetNamespaceDetail(
    """name of the Namespace"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): namespace_NamespaceDetail @httpOperation(subgraph: "api", path: "/api/v1/namespace/{args.name}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Events for Namespace"""
  handleGetNamespaceEvents(
    """name of the Namespace"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): common_EventList @httpOperation(subgraph: "api", path: "/api/v1/namespace/{args.name}/event", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of NetworkPolicies in a namespaces"""
  handleGetNetworkPolicyList(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """namespace of the NetworkPolicy"""
    namespace: String!
  ): networkpolicy_NetworkPolicyList @httpOperation(subgraph: "api", path: "/api/v1/networkpolicy", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/networkpolicy/{args.namespace}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about NetworkPolicy"""
  handleGetNetworkPolicyDetail(
    """namespace of the NetworkPolicy"""
    namespace: String!
    """name of the NetworkPolicy"""
    networkpolicy: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): networkpolicy_NetworkPolicyDetail @httpOperation(subgraph: "api", path: "/api/v1/networkpolicy/{args.namespace}/{args.networkpolicy}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Nodes"""
  handleGetNodeList(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): node_NodeList @httpOperation(subgraph: "api", path: "/api/v1/node", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about Node"""
  handleGetNodeDetail(
    """name of the Node"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): node_NodeDetail @httpOperation(subgraph: "api", path: "/api/v1/node/{args.name}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Events for Node"""
  handleGetNodeEvents(
    """name of the Node"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): common_EventList @httpOperation(subgraph: "api", path: "/api/v1/node/{args.name}/event", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Pods for Node"""
  handleGetNodePods(
    """name of the Node"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): pod_PodList @httpOperation(subgraph: "api", path: "/api/v1/node/{args.name}/pod", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of PersistentVolumes from all namespaces"""
  handleGetPersistentVolumeList(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): persistentvolume_PersistentVolumeList @httpOperation(subgraph: "api", path: "/api/v1/persistentvolume", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about PersistentVolume"""
  handleGetPersistentVolumeDetail(
    """name of the PersistentVolume"""
    persistentvolume: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): persistentvolume_PersistentVolumeDetail @httpOperation(subgraph: "api", path: "/api/v1/persistentvolume/namespace/{namespace}/name/{args.persistentvolume}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/persistentvolume/{args.persistentvolume}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of PersistentVolumeClaim from specified namespace"""
  handleGetPersistentVolumeClaimList(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """namespace of the PersistentVolumeClaim"""
    namespace: String!
  ): persistentvolumeclaim_PersistentVolumeClaimList @httpOperation(subgraph: "api", path: "/api/v1/persistentvolumeclaim", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/persistentvolumeclaim/{args.namespace}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about PersistentVolumeClaim"""
  handleGetPersistentVolumeClaimDetail(
    """namespace of the PersistentVolumeClaim"""
    namespace: String!
    """name of the PersistentVolumeClaim"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): persistentvolumeclaim_PersistentVolumeClaimDetail @httpOperation(subgraph: "api", path: "/api/v1/persistentvolumeclaim/{args.namespace}/{args.name}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Pods in a namespaces"""
  handleGetPods(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """namespace of the Pod"""
    namespace: String!
  ): pod_PodList @httpOperation(subgraph: "api", path: "/api/v1/pod", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/pod/{args.namespace}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about Pod"""
  handleGetPodDetail(
    """namespace of the Pod"""
    namespace: String!
    """name of the Pod"""
    pod: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): pod_PodDetail @httpOperation(subgraph: "api", path: "/api/v1/pod/{args.namespace}/{args.pod}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of containers for Pod"""
  handleGetPodContainers(
    """namespace of the Pod"""
    namespace: String!
    """name of the Pod"""
    pod: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): pod_PodDetail @httpOperation(subgraph: "api", path: "/api/v1/pod/{args.namespace}/{args.pod}/container", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Events for Pod"""
  handleGetPodEvents(
    """namespace of the Pod"""
    namespace: String!
    """name of the Pod"""
    pod: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): common_EventList @httpOperation(subgraph: "api", path: "/api/v1/pod/{args.namespace}/{args.pod}/event", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of containers for Pod"""
  handleGetPodPersistentVolumeClaims(
    """namespace of the Pod"""
    namespace: String!
    """name of the Pod"""
    pod: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): persistentvolumeclaim_PersistentVolumeClaimList @httpOperation(subgraph: "api", path: "/api/v1/pod/{args.namespace}/{args.pod}/persistentvolumeclaim", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """handles exec into pod"""
  handleExecShell(
    """namespace of the Pod"""
    namespace: String!
    """name of the Pod"""
    pod: String!
    """name of container in the Pod"""
    container: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): handler_TerminalResponse @httpOperation(subgraph: "api", path: "/api/v1/pod/{args.namespace}/{args.pod}/shell/{args.container}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of PodDisruptionBudget from specified namespace"""
  handleGetPodDisruptionBudgetList(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """namespace of the PodDisruptionBudget"""
    namespace: String!
  ): poddisruptionbudget_PodDisruptionBudgetList @httpOperation(subgraph: "api", path: "/api/v1/poddisruptionbudget", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/poddisruptionbudget/{args.namespace}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about PodDisruptionBudget"""
  handleGetPodDisruptionBudgetDetail(
    """namespace of the PodDisruptionBudget"""
    namespace: String!
    """name of the PodDisruptionBudget"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): poddisruptionbudget_PodDisruptionBudgetDetail @httpOperation(subgraph: "api", path: "/api/v1/poddisruptionbudget/{args.namespace}/{args.name}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of ReplicaSets in a namespace"""
  handleGetReplicaSets(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """namespace of the ReplicaSets"""
    namespace: String!
  ): replicaset_ReplicaSetList @httpOperation(subgraph: "api", path: "/api/v1/replicaset", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/replicaset/{args.namespace}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about ReplicaSet"""
  handleGetReplicaSetDetail(
    """namespace of the ReplicaSet"""
    namespace: String!
    """name of the ReplicaSets"""
    replicaSet: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): replicaset_ReplicaSetDetail @httpOperation(subgraph: "api", path: "/api/v1/replicaset/{args.namespace}/{args.replicaSet}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Events for ReplicaSet"""
  handleGetReplicaSetEvents(
    """namespace of the ReplicaSet"""
    namespace: String!
    """name of the ReplicaSets"""
    replicaSet: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): common_EventList @httpOperation(subgraph: "api", path: "/api/v1/replicaset/{args.namespace}/{args.replicaSet}/event", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Pods for ReplicaSet"""
  handleGetReplicaSetPods(
    """namespace of the ReplicaSet"""
    namespace: String!
    """name of the ReplicaSets"""
    replicaSet: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): pod_PodList @httpOperation(subgraph: "api", path: "/api/v1/replicaset/{args.namespace}/{args.replicaSet}/pod", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Services for ReplicaSet"""
  handleGetReplicaSetServices(
    """namespace of the ReplicaSet"""
    namespace: String!
    """name of the ReplicaSets"""
    replicaSet: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): service_ServiceList @httpOperation(subgraph: "api", path: "/api/v1/replicaset/{args.namespace}/{args.replicaSet}/service", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of ReplicationController in a namespace"""
  handleGetReplicationControllerList(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """namespace to get a list of ReplicationController from"""
    namespace: String!
  ): replicationcontroller_ReplicationControllerList @httpOperation(subgraph: "api", path: "/api/v1/replicationcontroller", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/replicationcontroller/{args.namespace}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about ReplicationController"""
  handleGetReplicationControllerDetail(
    """namespace of the ReplicationController"""
    namespace: String!
    """name of the ReplicationController"""
    replicationController: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): replicationcontroller_ReplicationControllerDetail @httpOperation(subgraph: "api", path: "/api/v1/replicationcontroller/{args.namespace}/{args.replicationController}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Events for ReplicationController"""
  handleGetReplicationControllerEvents(
    """namespace of the ReplicationController"""
    namespace: String!
    """name of the ReplicationController"""
    replicationController: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): common_EventList @httpOperation(subgraph: "api", path: "/api/v1/replicationcontroller/{args.namespace}/{args.replicationController}/event", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Pods for ReplicationController"""
  handleGetReplicationControllerPods(
    """namespace of the ReplicationController"""
    namespace: String!
    """name of the ReplicationController"""
    replicationController: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): pod_PodList @httpOperation(subgraph: "api", path: "/api/v1/replicationcontroller/{args.namespace}/{args.replicationController}/pod", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Services for ReplicationController"""
  handleGetReplicationControllerServices(
    """namespace of the ReplicationController"""
    namespace: String!
    """name of the ReplicationController"""
    replicationController: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): service_ServiceList @httpOperation(subgraph: "api", path: "/api/v1/replicationcontroller/{args.namespace}/{args.replicationController}/service", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Roles in a namespace"""
  handleGetRoleList(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """namespace of the Role"""
    namespace: String!
  ): role_RoleList @httpOperation(subgraph: "api", path: "/api/v1/role", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/role/{args.namespace}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about Role"""
  handleGetRoleDetail(
    """namespace of the Role"""
    namespace: String!
    """name of the Role"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): role_RoleDetail @httpOperation(subgraph: "api", path: "/api/v1/role/{args.namespace}/{args.name}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of RoleBindings in a namespace"""
  handleGetRoleBindingList(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """namespace of the RoleBinding"""
    namespace: String!
  ): rolebinding_RoleBindingList @httpOperation(subgraph: "api", path: "/api/v1/rolebinding", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/rolebinding/{args.namespace}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about RoleBinding"""
  handleGetRoleBindingDetail(
    """namespace of the RoleBinding"""
    namespace: String!
    """name of the RoleBinding"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): rolebinding_RoleBindingDetail @httpOperation(subgraph: "api", path: "/api/v1/rolebinding/{args.namespace}/{args.name}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a number of replicas of non-namespaced resource"""
  handleGetReplicaCount(
    """kind of the resource"""
    kind: String!
    """namespace of the resource"""
    namespace: String!
    """name of the resource"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): scaling_ReplicaCounts @httpOperation(subgraph: "api", path: "/api/v1/scale/{args.kind}/{args.namespace}/{args.name}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/scale/{args.kind}/{args.name}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Secrets in a namespace"""
  handleGetSecretList(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """namespace of the Secret"""
    namespace: String!
  ): secret_SecretList @httpOperation(subgraph: "api", path: "/api/v1/secret", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/secret/{args.namespace}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about Secret"""
  handleGetSecretDetail(
    """namespace of the Secret"""
    namespace: String!
    """name of the Secret"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): secret_SecretDetail @httpOperation(subgraph: "api", path: "/api/v1/secret/{args.namespace}/{args.name}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Services in a namespace"""
  handleGetServiceList(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """namespace of the Service"""
    namespace: String!
  ): service_ServiceList @httpOperation(subgraph: "api", path: "/api/v1/service", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/service/{args.namespace}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about Service"""
  handleGetServiceDetail(
    """namespace of the Service"""
    namespace: String!
    """name of the Service"""
    service: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): service_ServiceDetail @httpOperation(subgraph: "api", path: "/api/v1/service/{args.namespace}/{args.service}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Events for Service"""
  handleGetServiceEvent(
    """namespace of the Service"""
    namespace: String!
    """name of the Service"""
    service: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): common_EventList @httpOperation(subgraph: "api", path: "/api/v1/service/{args.namespace}/{args.service}/event", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Ingresses for Service"""
  handleGetServiceIngressList(
    """namespace of the Service"""
    namespace: String!
    """name of the Service"""
    service: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): ingress_IngressList @httpOperation(subgraph: "api", path: "/api/v1/service/{args.namespace}/{args.service}/ingress", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Pods for Service"""
  handleGetServicePods(
    """namespace of the Service"""
    namespace: String!
    """name of the Service"""
    service: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): pod_PodList @httpOperation(subgraph: "api", path: "/api/v1/service/{args.namespace}/{args.service}/pod", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of ServiceAccounts in a namespaces"""
  handleGetServiceAccountList(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """namespace of the ServiceAccount"""
    namespace: String!
  ): serviceaccount_ServiceAccountList @httpOperation(subgraph: "api", path: "/api/v1/serviceaccount", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/serviceaccount/{args.namespace}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about ServiceAccount"""
  handleGetServiceAccountDetail(
    """namespace of the ServiceAccount"""
    namespace: String!
    """name of the ServiceAccount"""
    serviceaccount: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): serviceaccount_ServiceAccountDetail @httpOperation(subgraph: "api", path: "/api/v1/serviceaccount/{args.namespace}/{args.serviceaccount}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of ImagePullSecret Secrets for ServiceAccount"""
  handleGetServiceAccountImagePullSecrets(
    """namespace of the ServiceAccount"""
    namespace: String!
    """name of the ServiceAccount"""
    serviceaccount: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): secret_SecretList @httpOperation(subgraph: "api", path: "/api/v1/serviceaccount/{args.namespace}/{args.serviceaccount}/imagepullsecret", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Secrets for ServiceAccount"""
  handleGetServiceAccountSecrets(
    """namespace of the ServiceAccount"""
    namespace: String!
    """name of the ServiceAccount"""
    serviceaccount: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): secret_SecretList @httpOperation(subgraph: "api", path: "/api/v1/serviceaccount/{args.namespace}/{args.serviceaccount}/secret", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of StatefulSets in a namespaces"""
  handleGetStatefulSetList(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """namespace of the StatefulSet"""
    namespace: String!
  ): statefulset_StatefulSetList @httpOperation(subgraph: "api", path: "/api/v1/statefulset", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/statefulset/{args.namespace}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about StatefulSets"""
  handleGetStatefulSetDetail(
    """namespace of the StatefulSet"""
    namespace: String!
    """name of the StatefulSet"""
    statefulset: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): statefulset_StatefulSetDetail @httpOperation(subgraph: "api", path: "/api/v1/statefulset/{args.namespace}/{args.statefulset}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of Events for StatefulSets"""
  handleGetStatefulSetEvents(
    """namespace of the StatefulSet"""
    namespace: String!
    """name of the StatefulSet"""
    statefulset: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): common_EventList @httpOperation(subgraph: "api", path: "/api/v1/statefulset/{args.namespace}/{args.statefulset}/event", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns  a list of Pods for StatefulSets"""
  handleGetStatefulSetPods(
    """namespace of the StatefulSet"""
    namespace: String!
    """name of the StatefulSet"""
    statefulset: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): pod_PodList @httpOperation(subgraph: "api", path: "/api/v1/statefulset/{args.namespace}/{args.statefulset}/pod", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of StorageClasses"""
  handleGetStorageClassList(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): storageclass_StorageClassList @httpOperation(subgraph: "api", path: "/api/v1/storageclass", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns detailed information about StorageClass"""
  handleGetStorageClass(
    """name of the StorageClass"""
    storageclass: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): storageclass_StorageClass @httpOperation(subgraph: "api", path: "/api/v1/storageclass/{args.storageclass}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of PersistentVolumes assigned to StorageClass"""
  handleGetStorageClassPersistentVolumes(
    """name of the StorageClass"""
    storageclass: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): persistentvolume_PersistentVolumeList @httpOperation(subgraph: "api", path: "/api/v1/storageclass/{args.storageclass}/persistentvolume", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """returns a list of HorizontalPodAutoscalers for resource"""
  handleGetHorizontalPodAutoscalerListForResource(
    """kind of the resource to get HorizontalPodAutoscalers for"""
    kind: String!
    """namespace of the resource to get HorizontalPodAutoscalers for"""
    namespace: String!
    """name of the resource to get HorizontalPodAutoscalers for"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): horizontalpodautoscaler_HorizontalPodAutoscalerList @httpOperation(subgraph: "api", path: "/api/v1/{args.kind}/{args.namespace}/{args.name}/horizontalpodautoscaler", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
}

type unstructured_Unstructured {
  Object: JSON!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type deployment_Protocols {
  protocols: [String]!
}

type clusterrole_ClusterRoleList {
  errors: [JSON]!
  items: [clusterrole_ClusterRole]!
  listMeta: types_ListMeta!
}

type clusterrole_ClusterRole {
  objectMeta: types_ObjectMeta!
  typeMeta: types_TypeMeta!
}

type types_ObjectMeta {
  annotations: JSON
  creationTimestamp: String
  labels: JSON
  name: String
  namespace: String
  ownerReferences: [types_OwnerReference]
  uid: String
}

type v1_Time {
  Time: DateTime!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type types_OwnerReference {
  kind: String!
  name: String!
}

type types_TypeMeta {
  kind: String
  restartable: Boolean
  scalable: Boolean
}

type types_ListMeta {
  totalItems: Int!
}

type clusterrole_ClusterRoleDetail {
  errors: [JSON]!
  objectMeta: types_ObjectMeta!
  rules: [v1_PolicyRule]!
  typeMeta: types_TypeMeta!
}

"""
PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
"""
type v1_PolicyRule {
  """
  APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. "" represents the core API group and "*" represents all API groups.
  """
  apiGroups: [String]
  """
  NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
  """
  nonResourceURLs: [String]
  """
  ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
  """
  resourceNames: [String]
  """
  Resources is a list of resources this rule applies to. '*' represents all resources.
  """
  resources: [String]
  """
  Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '*' represents all verbs.
  """
  verbs: [String]!
}

type clusterrolebinding_ClusterRoleBindingList {
  errors: [JSON]!
  items: [clusterrolebinding_ClusterRoleBinding]!
  listMeta: types_ListMeta!
}

type clusterrolebinding_ClusterRoleBinding {
  objectMeta: types_ObjectMeta!
  typeMeta: types_TypeMeta!
}

type clusterrolebinding_ClusterRoleBindingDetail {
  errors: [JSON]!
  objectMeta: types_ObjectMeta!
  roleRef: v1_RoleRef!
  subjects: [v1_Subject]
  typeMeta: types_TypeMeta!
}

"""RoleRef contains information that points to the role being used"""
type v1_RoleRef {
  """APIGroup is the group for the resource being referenced"""
  apiGroup: String!
  """Kind is the type of resource being referenced"""
  kind: String!
  """Name is the name of resource being referenced"""
  name: String!
}

"""
Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
"""
type v1_Subject {
  """
  APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
  """
  apiGroup: String
  """
  Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
  """
  kind: String!
  """Name of the object being referenced."""
  name: String!
  """
  Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
  """
  namespace: String
}

type configmap_ConfigMapList {
  errors: [JSON]!
  items: [configmap_ConfigMap]!
  listMeta: types_ListMeta!
}

type configmap_ConfigMap {
  objectMeta: types_ObjectMeta!
  typeMeta: types_TypeMeta!
}

type configmap_ConfigMapDetail {
  data: JSON
  objectMeta: types_ObjectMeta!
  typeMeta: types_TypeMeta!
}

type types_CustomResourceDefinitionList {
  errors: [JSON]!
  items: [types_CustomResourceDefinition]!
  listMeta: types_ListMeta!
}

type types_CustomResourceDefinition {
  established: String!
  group: String!
  names: types_CustomResourceDefinitionNames!
  objectMeta: types_ObjectMeta!
  scope: String!
  typeMeta: types_TypeMeta!
  version: String
}

type types_CustomResourceDefinitionNames {
  categories: [String]
  kind: String!
  listKind: String
  plural: String!
  shortNames: [String]
  singular: String
}

type types_CustomResourceDefinitionDetail {
  conditions: [common_Condition]!
  errors: [JSON]!
  established: String!
  group: String!
  names: types_CustomResourceDefinitionNames!
  objectMeta: types_ObjectMeta!
  objects: types_CustomResourceObjectList!
  scope: String!
  subresources: [String]!
  typeMeta: types_TypeMeta!
  version: String
  versions: [types_CustomResourceDefinitionVersion]
}

type common_Condition {
  lastProbeTime: String!
  lastTransitionTime: String!
  message: String!
  reason: String!
  status: String!
  type: String!
}

type types_CustomResourceObjectList {
  errors: [JSON]!
  items: [types_CustomResourceObject]!
  listMeta: types_ListMeta!
  typeMeta: v1_TypeMeta!
}

type types_CustomResourceObject {
  objectMeta: types_ObjectMeta!
  typeMeta: types_TypeMeta!
}

"""
TypeMeta describes an individual object in an API response or request with strings representing the type of the object and its API schema version. Structures that are versioned or persisted should inline TypeMeta.
"""
type v1_TypeMeta {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String
  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String
}

type types_CustomResourceDefinitionVersion {
  name: String!
  served: Boolean!
  storage: Boolean!
}

type types_CustomResourceObjectDetail {
  errors: [JSON]!
  objectMeta: types_ObjectMeta!
  typeMeta: types_TypeMeta!
}

type common_EventList {
  errors: [JSON]!
  events: [common_Event]!
  listMeta: types_ListMeta!
}

type common_Event {
  count: Int!
  firstSeen: String!
  lastSeen: String!
  message: String!
  object: String!
  objectKind: String
  objectMeta: types_ObjectMeta!
  objectName: String
  objectNamespace: String
  reason: String!
  sourceComponent: String!
  sourceHost: String!
  type: String!
  typeMeta: types_TypeMeta!
}

type cronjob_CronJobList {
  errors: [JSON]!
  items: [cronjob_CronJob]!
  listMeta: types_ListMeta!
  status: common_ResourceStatus!
}

type cronjob_CronJob {
  active: Int!
  containerImages: [String]!
  lastSchedule: String!
  objectMeta: types_ObjectMeta!
  schedule: String!
  suspend: Boolean!
  typeMeta: types_TypeMeta!
}

type common_ResourceStatus {
  failed: Int!
  pending: Int!
  running: Int!
  succeeded: Int!
  terminating: Int!
}

type cronjob_CronJobDetail {
  active: Int!
  concurrencyPolicy: String!
  containerImages: [String]!
  errors: [JSON]!
  lastSchedule: String!
  objectMeta: types_ObjectMeta!
  schedule: String!
  startingDeadlineSeconds: BigInt!
  suspend: Boolean!
  typeMeta: types_TypeMeta!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type job_JobList {
  cumulativeMetrics: [api_Metric]!
  errors: [JSON]!
  jobs: [job_Job]!
  listMeta: types_ListMeta!
  status: common_ResourceStatus!
}

type api_Metric {
  aggregation: String
  dataPoints: [api_DataPoint]!
  metricName: String!
  metricPoints: [api_MetricPoint]!
}

type api_DataPoint {
  x: BigInt!
  y: BigInt!
}

type api_MetricPoint {
  timestamp: DateTime!
  value: Int!
}

type job_Job {
  containerImages: [String]!
  initContainerImages: [String]!
  jobStatus: job_JobStatus!
  objectMeta: types_ObjectMeta!
  parallelism: Int!
  podInfo: common_PodInfo!
  typeMeta: types_TypeMeta!
}

type job_JobStatus {
  conditions: [common_Condition]!
  message: String!
  status: String!
}

type common_PodInfo {
  current: Int!
  desired: Int
  failed: Int!
  pending: Int!
  running: Int!
  succeeded: Int!
  warnings: [common_Event]!
}

type csrf_Response {
  token: String!
}

type daemonset_DaemonSetList {
  cumulativeMetrics: [api_Metric]!
  daemonSets: [daemonset_DaemonSet]!
  errors: [JSON]!
  listMeta: types_ListMeta!
  status: common_ResourceStatus!
}

type daemonset_DaemonSet {
  containerImages: [String]!
  initContainerImages: [String]!
  objectMeta: types_ObjectMeta!
  podInfo: common_PodInfo!
  typeMeta: types_TypeMeta!
}

type daemonset_DaemonSetDetail {
  containerImages: [String]!
  errors: [JSON]!
  initContainerImages: [String]!
  labelSelector: v1_LabelSelector
  objectMeta: types_ObjectMeta!
  podInfo: common_PodInfo!
  typeMeta: types_TypeMeta!
}

"""
A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
"""
type v1_LabelSelector {
  """
  matchExpressions is a list of label selector requirements. The requirements are ANDed.
  """
  matchExpressions: [v1_LabelSelectorRequirement]
  """
  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
  """
  matchLabels: JSON
}

"""
A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
"""
type v1_LabelSelectorRequirement {
  """key is the label key that the selector applies to."""
  key: String!
  """
  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
  """
  operator: String!
  """
  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
  """
  values: [String]
}

type pod_PodList {
  cumulativeMetrics: [api_Metric]!
  errors: [JSON]!
  listMeta: types_ListMeta!
  pods: [pod_Pod]!
  status: common_ResourceStatus!
}

type pod_Pod {
  allocatedResources: pod_PodAllocatedResources!
  containerImages: [String]!
  containerStatuses: [pod_ContainerStatus]!
  metrics: pod_PodMetrics!
  nodeName: String!
  objectMeta: types_ObjectMeta!
  restartCount: Int!
  status: String!
  typeMeta: types_TypeMeta!
  warnings: [common_Event]!
}

type pod_PodAllocatedResources {
  cpuLimits: BigInt!
  cpuRequests: BigInt!
  memoryLimits: BigInt!
  memoryRequests: BigInt!
}

type pod_ContainerStatus {
  name: String!
  ready: Boolean!
  state: ContainerState!
}

type pod_PodMetrics {
  cpuUsage: Int!
  cpuUsageHistory: [api_MetricPoint]!
  memoryUsage: Int!
  memoryUsageHistory: [api_MetricPoint]!
}

type service_ServiceList {
  errors: [JSON]!
  listMeta: types_ListMeta!
  services: [service_Service]!
}

type service_Service {
  clusterIP: String!
  externalEndpoints: [common_Endpoint]!
  internalEndpoint: common_Endpoint!
  objectMeta: types_ObjectMeta!
  selector: JSON!
  type: String!
  typeMeta: types_TypeMeta!
}

type common_Endpoint {
  host: String!
  ports: [common_ServicePort]!
}

type common_ServicePort {
  nodePort: Int!
  port: Int!
  protocol: String!
}

type deployment_DeploymentList {
  cumulativeMetrics: [api_Metric]!
  deployments: [deployment_Deployment]!
  errors: [JSON]!
  listMeta: types_ListMeta!
  status: common_ResourceStatus!
}

type deployment_Deployment {
  containerImages: [String]!
  initContainerImages: [String]!
  objectMeta: types_ObjectMeta!
  pods: common_PodInfo!
  typeMeta: types_TypeMeta!
}

type deployment_DeploymentDetail {
  conditions: [common_Condition]!
  containerImages: [String]!
  errors: [JSON]!
  initContainerImages: [String]!
  minReadySeconds: Int!
  objectMeta: types_ObjectMeta!
  pods: common_PodInfo!
  revisionHistoryLimit: Int!
  rollingUpdateStrategy: deployment_RollingUpdateStrategy
  selector: JSON!
  statusInfo: deployment_StatusInfo!
  strategy: String!
  typeMeta: types_TypeMeta!
}

type deployment_RollingUpdateStrategy {
  maxSurge: String!
  maxUnavailable: String!
}

type intstr_IntOrString {
  IntVal: Int!
  StrVal: String!
  Type: BigInt!
}

type deployment_StatusInfo {
  available: Int!
  replicas: Int!
  unavailable: Int!
  updated: Int!
}

type replicaset_ReplicaSet {
  containerImages: [String]!
  initContainerImages: [String]!
  objectMeta: types_ObjectMeta!
  podInfo: common_PodInfo!
  typeMeta: types_TypeMeta!
}

type replicaset_ReplicaSetList {
  cumulativeMetrics: [api_Metric]!
  errors: [JSON]!
  listMeta: types_ListMeta!
  replicaSets: [replicaset_ReplicaSet]!
  status: common_ResourceStatus!
}

type horizontalpodautoscaler_HorizontalPodAutoscalerList {
  errors: [JSON]!
  horizontalpodautoscalers: [horizontalpodautoscaler_HorizontalPodAutoscaler]!
  listMeta: types_ListMeta!
}

type horizontalpodautoscaler_HorizontalPodAutoscaler {
  currentCPUUtilizationPercentage: Int!
  maxReplicas: Int!
  minReplicas: Int!
  objectMeta: types_ObjectMeta!
  scaleTargetRef: horizontalpodautoscaler_ScaleTargetRef!
  targetCPUUtilizationPercentage: Int!
  typeMeta: types_TypeMeta!
}

type horizontalpodautoscaler_ScaleTargetRef {
  kind: String!
  name: String!
}

type horizontalpodautoscaler_HorizontalPodAutoscalerDetail {
  currentCPUUtilizationPercentage: Int!
  currentReplicas: Int!
  desiredReplicas: Int!
  lastScaleTime: String!
  maxReplicas: Int!
  minReplicas: Int!
  objectMeta: types_ObjectMeta!
  scaleTargetRef: horizontalpodautoscaler_ScaleTargetRef!
  targetCPUUtilizationPercentage: Int!
  typeMeta: types_TypeMeta!
}

type ingress_IngressList {
  errors: [JSON]!
  items: [ingress_Ingress]!
  listMeta: types_ListMeta!
}

type ingress_Ingress {
  endpoints: [common_Endpoint]!
  hosts: [String]!
  objectMeta: types_ObjectMeta!
  typeMeta: types_TypeMeta!
}

type ingress_IngressDetail {
  endpoints: [common_Endpoint]!
  errors: [JSON]!
  hosts: [String]!
  objectMeta: types_ObjectMeta!
  spec: v1_IngressSpec!
  status: v1_IngressStatus!
  typeMeta: types_TypeMeta!
}

"""IngressSpec describes the Ingress the user wishes to exist."""
type v1_IngressSpec {
  defaultBackend: v1_IngressBackend
  """
  ingressClassName is the name of an IngressClass cluster resource. Ingress controller implementations use this field to know whether they should be serving this Ingress resource, by a transitive connection (controller -> IngressClass -> Ingress resource). Although the `kubernetes.io/ingress.class` annotation (simple constant name) was never formally defined, it was widely supported by Ingress controllers to create a direct binding between Ingress controller and Ingress resources. Newly created Ingress resources should prefer using the field. However, even though the annotation is officially deprecated, for backwards compatibility reasons, ingress controllers should still honor that annotation if present.
  """
  ingressClassName: String
  """
  rules is a list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
  """
  rules: [v1_IngressRule]
  """
  tls represents the TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
  """
  tls: [v1_IngressTLS]
}

"""IngressBackend describes all endpoints for a given service and port."""
type v1_IngressBackend {
  resource: v1_TypedLocalObjectReference
  service: v1_IngressServiceBackend
}

"""
TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
"""
type v1_TypedLocalObjectReference {
  """
  APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
  """
  apiGroup: String!
  """Kind is the type of resource being referenced"""
  kind: String!
  """Name is the name of resource being referenced"""
  name: String!
}

"""IngressServiceBackend references a Kubernetes Service as a Backend."""
type v1_IngressServiceBackend {
  """
  name is the referenced service. The service must exist in the same namespace as the Ingress object.
  """
  name: String!
  port: v1_ServiceBackendPort
}

"""ServiceBackendPort is the service port being referenced."""
type v1_ServiceBackendPort {
  """
  name is the name of the port on the Service. This is a mutually exclusive setting with "Number".
  """
  name: String
  """
  number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with "Name".
  """
  number: Int
}

"""
IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.
"""
type v1_IngressRule {
  """
  host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to
     the IP in the Spec of the parent Ingress.
  2. The `:` delimiter is not respected because ports are not allowed.
  	  Currently the port of an Ingress is implicitly :80 for http and
  	  :443 for https.
  Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
  
  host can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be matched against the Host field in the following way: 1. If host is precise, the request matches this rule if the http host header is equal to Host. 2. If host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.
  """
  host: String
  http: v1_HTTPIngressRuleValue
}

"""
HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
"""
type v1_HTTPIngressRuleValue {
  """paths is a collection of paths that map requests to backends."""
  paths: [v1_HTTPIngressPath]!
}

"""
HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
"""
type v1_HTTPIngressPath {
  backend: v1_IngressBackend!
  """
  path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value "Exact" or "Prefix".
  """
  path: String
  """
  pathType determines the interpretation of the path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is
    done on a path element by element basis. A path element refers is the
    list of labels in the path split by the '/' separator. A request is a
    match for path p if every p is an element-wise prefix of p of the
    request path. Note that if the last element of the path is a substring
    of the last element in request path, it is not a match (e.g. /foo/bar
    matches /foo/bar/baz, but does not match /foo/barbaz).
  * ImplementationSpecific: Interpretation of the Path matching is up to
    the IngressClass. Implementations can treat this as a separate PathType
    or treat it identically to Prefix or Exact path types.
  Implementations are required to support all path types.
  """
  pathType: String!
}

"""
IngressTLS describes the transport layer security associated with an ingress.
"""
type v1_IngressTLS {
  """
  hosts is a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
  """
  hosts: [String]
  """
  secretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the "Host" header is used for routing.
  """
  secretName: String
}

"""IngressStatus describe the current state of the Ingress."""
type v1_IngressStatus {
  loadBalancer: v1_IngressLoadBalancerStatus
}

"""IngressLoadBalancerStatus represents the status of a load-balancer."""
type v1_IngressLoadBalancerStatus {
  """ingress is a list containing ingress points for the load-balancer."""
  ingress: [v1_IngressLoadBalancerIngress]
}

"""
IngressLoadBalancerIngress represents the status of a load-balancer ingress point.
"""
type v1_IngressLoadBalancerIngress {
  """hostname is set for load-balancer ingress points that are DNS based."""
  hostname: String
  """ip is set for load-balancer ingress points that are IP based."""
  ip: String
  """
  ports provides information about the ports exposed by this LoadBalancer.
  """
  ports: [v1_IngressPortStatus]
}

"""IngressPortStatus represents the error condition of a service port"""
type v1_IngressPortStatus {
  """
  error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
    CamelCase names
  - cloud provider specific error values must have names that comply with the
    format foo.example.com/CamelCase.
  """
  error: String
  """port is the port number of the ingress port."""
  port: Int!
  """
  protocol is the protocol of the ingress port. The supported values are: "TCP", "UDP", "SCTP"
  """
  protocol: String!
}

type ingressclass_IngressClassList {
  errors: [JSON]!
  items: [ingressclass_IngressClass]!
  listMeta: types_ListMeta!
}

type ingressclass_IngressClass {
  controller: String!
  objectMeta: types_ObjectMeta!
  typeMeta: types_TypeMeta!
}

type job_JobDetail {
  completions: Int!
  containerImages: [String]!
  errors: [JSON]!
  initContainerImages: [String]!
  jobStatus: job_JobStatus!
  objectMeta: types_ObjectMeta!
  parallelism: Int!
  podInfo: common_PodInfo!
  typeMeta: types_TypeMeta!
}

type controller_LogSources {
  containerNames: [String]!
  initContainerNames: [String]!
  podNames: [String]!
}

type logs_LogDetails {
  info: logs_LogInfo!
  logs: [logs_LogLine]!
  selection: logs_Selection!
}

type logs_LogInfo {
  containerName: String!
  fromDate: String!
  initContainerName: String!
  podName: String!
  toDate: String!
  truncated: Boolean!
}

type logs_LogLine {
  content: String!
  timestamp: String!
}

type logs_Selection {
  logFilePosition: String!
  offsetFrom: Int!
  offsetTo: Int!
  referencePoint: logs_LogLineId!
}

type logs_LogLineId {
  lineNum: Int!
  timestamp: String!
}

type namespace_NamespaceList {
  errors: [JSON]!
  listMeta: types_ListMeta!
  namespaces: [namespace_Namespace]!
}

type namespace_Namespace {
  objectMeta: types_ObjectMeta!
  phase: String!
  typeMeta: types_TypeMeta!
}

type namespace_NamespaceDetail {
  errors: [JSON]!
  objectMeta: types_ObjectMeta!
  phase: String!
  resourceLimits: [limitrange_LimitRangeItem]!
  resourceQuotaList: resourcequota_ResourceQuotaDetailList!
  typeMeta: types_TypeMeta!
}

type limitrange_LimitRangeItem {
  default: String
  defaultRequest: String
  max: String
  maxLimitRequestRatio: String
  min: String
  resourceName: String
  resourceType: String
}

type resourcequota_ResourceQuotaDetailList {
  items: [resourcequota_ResourceQuotaDetail]!
  listMeta: types_ListMeta!
}

type resourcequota_ResourceQuotaDetail {
  objectMeta: types_ObjectMeta!
  scopes: [String]
  statusList: ObjMap!
  typeMeta: types_TypeMeta!
}

type query_handleGetNamespaceDetail_resourceQuotaList_items_items_statusList {
  additionalProperties: [resourcequota_ResourceStatus_entry] @dictionary(subgraph: "api")
}

type resourcequota_ResourceStatus_entry {
  key: ID!
  value: resourcequota_ResourceStatus
}

type resourcequota_ResourceStatus {
  hard: String
  used: String
}

type networkpolicy_NetworkPolicyList {
  errors: [JSON]!
  items: [networkpolicy_NetworkPolicy]!
  listMeta: types_ListMeta!
}

type networkpolicy_NetworkPolicy {
  objectMeta: types_ObjectMeta!
  typeMeta: types_TypeMeta!
}

type networkpolicy_NetworkPolicyDetail {
  egress: [v1_NetworkPolicyEgressRule]
  errors: [JSON]!
  ingress: [v1_NetworkPolicyIngressRule]
  objectMeta: types_ObjectMeta!
  podSelector: v1_LabelSelector!
  policyTypes: [String]
  typeMeta: types_TypeMeta!
}

"""
NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8
"""
type v1_NetworkPolicyEgressRule {
  """
  ports is a list of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
  """
  ports: [v1_NetworkPolicyPort]
  """
  to is a list of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
  """
  to: [v1_NetworkPolicyPeer]
}

"""NetworkPolicyPort describes a port to allow traffic on"""
type v1_NetworkPolicyPort {
  """
  endPort indicates that the range of ports from port to endPort if set, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.
  """
  endPort: Int
  port: String
  """
  protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
  """
  protocol: String
}

"""
NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed
"""
type v1_NetworkPolicyPeer {
  ipBlock: v1_IPBlock
  namespaceSelector: v1_LabelSelector
  podSelector: v1_LabelSelector
}

"""
IPBlock describes a particular CIDR (Ex. "192.168.1.0/24","2001:db8::/64") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
"""
type v1_IPBlock {
  """
  cidr is a string representing the IPBlock Valid examples are "192.168.1.0/24" or "2001:db8::/64"
  """
  cidr: String!
  """
  except is a slice of CIDRs that should not be included within an IPBlock Valid examples are "192.168.1.0/24" or "2001:db8::/64" Except values will be rejected if they are outside the cidr range
  """
  except: [String]
}

"""
NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.
"""
type v1_NetworkPolicyIngressRule {
  """
  from is a list of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.
  """
  from: [v1_NetworkPolicyPeer]
  """
  ports is a list of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
  """
  ports: [v1_NetworkPolicyPort]
}

type node_NodeList {
  cumulativeMetrics: [api_Metric]!
  errors: [JSON]!
  listMeta: types_ListMeta!
  nodes: [node_Node]!
}

type node_Node {
  allocatedResources: node_NodeAllocatedResources!
  objectMeta: types_ObjectMeta!
  ready: String!
  typeMeta: types_TypeMeta!
}

type node_NodeAllocatedResources {
  allocatedPods: Int!
  cpuCapacity: BigInt!
  cpuLimits: BigInt!
  cpuLimitsFraction: Float!
  cpuRequests: BigInt!
  cpuRequestsFraction: Float!
  memoryCapacity: BigInt!
  memoryLimits: BigInt!
  memoryLimitsFraction: Float!
  memoryRequests: BigInt!
  memoryRequestsFraction: Float!
  podCapacity: BigInt!
  podFraction: Float!
}

type node_NodeDetail {
  addresses: [v1_NodeAddress]
  allocatedResources: node_NodeAllocatedResources!
  conditions: [common_Condition]!
  containerImages: [String]!
  errors: [JSON]!
  eventList: common_EventList!
  metrics: [api_Metric]!
  nodeInfo: v1_NodeSystemInfo!
  objectMeta: types_ObjectMeta!
  phase: String!
  podCIDR: String!
  podList: pod_PodList!
  providerID: String!
  ready: String!
  taints: [v1_Taint]
  typeMeta: types_TypeMeta!
  unschedulable: Boolean!
}

"""NodeAddress contains information for the node's address."""
type v1_NodeAddress {
  """The node address."""
  address: String!
  """Node address type, one of Hostname, ExternalIP or InternalIP."""
  type: String!
}

"""NodeSystemInfo is a set of ids/uuids to uniquely identify the node."""
type v1_NodeSystemInfo {
  """The Architecture reported by the node"""
  architecture: String!
  """Boot ID reported by the node."""
  bootID: String!
  """
  ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
  """
  containerRuntimeVersion: String!
  """
  Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
  """
  kernelVersion: String!
  """Deprecated: KubeProxy Version reported by the node."""
  kubeProxyVersion: String!
  """Kubelet Version reported by the node."""
  kubeletVersion: String!
  """
  MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
  """
  machineID: String!
  """The Operating System reported by the node"""
  operatingSystem: String!
  """
  OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
  """
  osImage: String!
  """
  SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
  """
  systemUUID: String!
}

"""
The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
"""
type v1_Taint {
  """
  Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
  """
  effect: String!
  """Required. The taint key to be applied to a node."""
  key: String!
  timeAdded: String
  """The taint value corresponding to the taint key."""
  value: String
}

type persistentvolume_PersistentVolumeList {
  errors: [JSON]!
  items: [persistentvolume_PersistentVolume]!
  listMeta: types_ListMeta!
}

type persistentvolume_PersistentVolume {
  accessModes: [String]!
  capacity: ObjMap!
  claim: String!
  mountOptions: [String]!
  objectMeta: types_ObjectMeta!
  reason: String!
  reclaimPolicy: String!
  status: String!
  storageClass: String!
  typeMeta: types_TypeMeta!
}

type query_handleGetPersistentVolumeList_items_items_capacity {
  additionalProperties: [resource_Quantity_entry] @dictionary(subgraph: "api")
}

type resource_Quantity_entry {
  key: ID!
  value: resource_Quantity
}

type resource_Quantity {
  Format: String!
  d: resource_infDecAmount!
  i: resource_int64Amount!
  s: String!
}

type resource_infDecAmount {
  Dec: inf_Dec!
}

type inf_Dec {
  scale: Int!
  unscaled: big_Int!
}

type big_Int {
  abs: [Int]!
  neg: Boolean!
}

type resource_int64Amount {
  scale: Int!
  value: BigInt!
}

type persistentvolume_PersistentVolumeDetail {
  accessModes: [String]!
  capacity: ObjMap!
  claim: String!
  message: String!
  mountOptions: [String]!
  objectMeta: types_ObjectMeta!
  persistentVolumeSource: v1_PersistentVolumeSource!
  reason: String!
  reclaimPolicy: String!
  status: String!
  storageClass: String!
  typeMeta: types_TypeMeta!
}

type query_handleGetPersistentVolumeDetail_capacity {
  additionalProperties: [resource_Quantity2_entry] @dictionary(subgraph: "api")
}

type resource_Quantity2_entry {
  key: ID!
  value: resource_Quantity2
}

type resource_Quantity2 {
  Format: String!
  d: resource_infDecAmount!
  i: resource_int64Amount!
  s: String!
}

"""
PersistentVolumeSource is similar to VolumeSource but meant for the administrator who creates PVs. Exactly one of its members must be set.
"""
type v1_PersistentVolumeSource {
  awsElasticBlockStore: v1_AWSElasticBlockStoreVolumeSource
  azureDisk: v1_AzureDiskVolumeSource
  azureFile: v1_AzureFilePersistentVolumeSource
  cephfs: v1_CephFSPersistentVolumeSource
  cinder: v1_CinderPersistentVolumeSource
  csi: v1_CSIPersistentVolumeSource
  fc: v1_FCVolumeSource
  flexVolume: v1_FlexPersistentVolumeSource
  flocker: v1_FlockerVolumeSource
  gcePersistentDisk: v1_GCEPersistentDiskVolumeSource
  glusterfs: v1_GlusterfsPersistentVolumeSource
  hostPath: v1_HostPathVolumeSource
  iscsi: v1_ISCSIPersistentVolumeSource
  local: v1_LocalVolumeSource
  nfs: v1_NFSVolumeSource
  photonPersistentDisk: v1_PhotonPersistentDiskVolumeSource
  portworxVolume: v1_PortworxVolumeSource
  quobyte: v1_QuobyteVolumeSource
  rbd: v1_RBDPersistentVolumeSource
  scaleIO: v1_ScaleIOPersistentVolumeSource
  storageos: v1_StorageOSPersistentVolumeSource
  vsphereVolume: v1_VsphereVirtualDiskVolumeSource
}

"""
Represents a Persistent Disk resource in AWS.

An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
"""
type v1_AWSElasticBlockStoreVolumeSource {
  """
  fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
  """
  fsType: String
  """
  partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
  """
  partition: Int
  """
  readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
  """
  readOnly: Boolean
  """
  volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
  """
  volumeID: String!
}

"""
AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
"""
type v1_AzureDiskVolumeSource {
  """cachingMode is the Host Caching mode: None, Read Only, Read Write."""
  cachingMode: String
  """diskName is the Name of the data disk in the blob storage"""
  diskName: String!
  """diskURI is the URI of data disk in the blob storage"""
  diskURI: String!
  """
  fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
  """
  fsType: String
  """
  kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
  """
  kind: String
  """
  readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean
}

"""
AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
"""
type v1_AzureFilePersistentVolumeSource {
  """
  readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean
  """
  secretName is the name of secret that contains Azure Storage Account Name and Key
  """
  secretName: String!
  """
  secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
  """
  secretNamespace: String!
  """shareName is the azure Share Name"""
  shareName: String!
}

"""
Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
"""
type v1_CephFSPersistentVolumeSource {
  """
  monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  monitors: [String]!
  """
  path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
  """
  path: String
  """
  readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  readOnly: Boolean
  """
  secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  secretFile: String
  secretRef: v1_SecretReference
  """
  user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  user: String
}

"""
SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
"""
type v1_SecretReference {
  """name is unique within a namespace to reference a secret resource."""
  name: String
  """
  namespace defines the space within which the secret name must be unique.
  """
  namespace: String
}

"""
Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
"""
type v1_CinderPersistentVolumeSource {
  """
  fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  """
  fsType: String
  """
  readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  """
  readOnly: Boolean
  secretRef: v1_SecretReference
  """
  volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  """
  volumeID: String!
}

"""Represents storage that is managed by an external CSI volume driver"""
type v1_CSIPersistentVolumeSource {
  controllerExpandSecretRef: v1_SecretReference
  controllerPublishSecretRef: v1_SecretReference
  """driver is the name of the driver to use for this volume. Required."""
  driver: String!
  """
  fsType to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
  """
  fsType: String
  nodeExpandSecretRef: v1_SecretReference
  nodePublishSecretRef: v1_SecretReference
  nodeStageSecretRef: v1_SecretReference
  """
  readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
  """
  readOnly: Boolean
  """volumeAttributes of the volume to publish."""
  volumeAttributes: JSON
  """
  volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
  """
  volumeHandle: String!
}

"""
Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
"""
type v1_FCVolumeSource {
  """
  fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
  """
  fsType: String
  """lun is Optional: FC target lun number"""
  lun: Int
  """
  readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean
  """targetWWNs is Optional: FC target worldwide names (WWNs)"""
  targetWWNs: [String]
  """
  wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
  """
  wwids: [String]
}

"""
FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.
"""
type v1_FlexPersistentVolumeSource {
  """driver is the name of the driver to use for this volume."""
  driver: String!
  """
  fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
  """
  fsType: String
  """options is Optional: this field holds extra command options if any."""
  options: JSON
  """
  readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean
  secretRef: v1_SecretReference
}

"""
Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
"""
type v1_FlockerVolumeSource {
  """
  datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
  """
  datasetName: String
  """
  datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
  """
  datasetUUID: String
}

"""
Represents a Persistent Disk resource in Google Compute Engine.

A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
"""
type v1_GCEPersistentDiskVolumeSource {
  """
  fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  """
  fsType: String
  """
  partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  """
  partition: Int
  """
  pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  """
  pdName: String!
  """
  readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  """
  readOnly: Boolean
}

"""
Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
"""
type v1_GlusterfsPersistentVolumeSource {
  """
  endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
  """
  endpoints: String!
  """
  endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
  """
  endpointsNamespace: String
  """
  path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
  """
  path: String!
  """
  readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
  """
  readOnly: Boolean
}

"""
Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
"""
type v1_HostPathVolumeSource {
  """
  path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
  """
  path: String!
  """
  type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
  """
  type: String
}

"""
ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
"""
type v1_ISCSIPersistentVolumeSource {
  """
  chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
  """
  chapAuthDiscovery: Boolean
  """
  chapAuthSession defines whether support iSCSI Session CHAP authentication
  """
  chapAuthSession: Boolean
  """
  fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
  """
  fsType: String
  """
  initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
  """
  initiatorName: String
  """iqn is Target iSCSI Qualified Name."""
  iqn: String!
  """
  iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
  """
  iscsiInterface: String
  """lun is iSCSI Target Lun number."""
  lun: Int!
  """
  portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
  """
  portals: [String]
  """
  readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
  """
  readOnly: Boolean
  secretRef: v1_SecretReference
  """
  targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
  """
  targetPortal: String!
}

"""Local represents directly-attached storage with node affinity"""
type v1_LocalVolumeSource {
  """
  fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a filesystem if unspecified.
  """
  fsType: String
  """
  path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).
  """
  path: String!
}

"""
Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
"""
type v1_NFSVolumeSource {
  """
  path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
  """
  path: String!
  """
  readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
  """
  readOnly: Boolean
  """
  server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
  """
  server: String!
}

"""Represents a Photon Controller persistent disk resource."""
type v1_PhotonPersistentDiskVolumeSource {
  """
  fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
  """
  fsType: String
  """pdID is the ID that identifies Photon Controller persistent disk"""
  pdID: String!
}

"""PortworxVolumeSource represents a Portworx volume resource."""
type v1_PortworxVolumeSource {
  """
  fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
  """
  fsType: String
  """
  readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean
  """volumeID uniquely identifies a Portworx volume"""
  volumeID: String!
}

"""
Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
"""
type v1_QuobyteVolumeSource {
  """group to map volume access to Default is no group"""
  group: String
  """
  readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
  """
  readOnly: Boolean
  """
  registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
  """
  registry: String!
  """
  tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
  """
  tenant: String
  """user to map volume access to Defaults to serivceaccount user"""
  user: String
  """
  volume is a string that references an already created Quobyte volume by name.
  """
  volume: String!
}

"""
Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
"""
type v1_RBDPersistentVolumeSource {
  """
  fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
  """
  fsType: String
  """
  image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  image: String!
  """
  keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  keyring: String
  """
  monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  monitors: [String]!
  """
  pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  pool: String
  """
  readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  readOnly: Boolean
  secretRef: v1_SecretReference
  """
  user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  user: String
}

"""ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume"""
type v1_ScaleIOPersistentVolumeSource {
  """
  fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
  """
  fsType: String
  """gateway is the host address of the ScaleIO API Gateway."""
  gateway: String!
  """
  protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
  """
  protectionDomain: String
  """
  readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean
  secretRef: v1_SecretReference!
  """
  sslEnabled is the flag to enable/disable SSL communication with Gateway, default false
  """
  sslEnabled: Boolean
  """
  storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
  """
  storageMode: String
  """
  storagePool is the ScaleIO Storage Pool associated with the protection domain.
  """
  storagePool: String
  """system is the name of the storage system as configured in ScaleIO."""
  system: String!
  """
  volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
  """
  volumeName: String
}

"""Represents a StorageOS persistent volume resource."""
type v1_StorageOSPersistentVolumeSource {
  """
  fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
  """
  fsType: String
  """
  readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean
  secretRef: v1_ObjectReference
  """
  volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
  """
  volumeName: String
  """
  volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
  """
  volumeNamespace: String
}

"""
ObjectReference contains enough information to let you inspect or modify the referred object.
"""
type v1_ObjectReference {
  """API version of the referent."""
  apiVersion: String
  """
  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
  """
  fieldPath: String
  """
  Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
  """
  Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
  """
  namespace: String
  """
  Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String
  """
  UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
  """
  uid: String
}

"""Represents a vSphere volume resource."""
type v1_VsphereVirtualDiskVolumeSource {
  """
  fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
  """
  fsType: String
  """
  storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
  """
  storagePolicyID: String
  """
  storagePolicyName is the storage Policy Based Management (SPBM) profile name.
  """
  storagePolicyName: String
  """volumePath is the path that identifies vSphere volume vmdk"""
  volumePath: String!
}

type persistentvolumeclaim_PersistentVolumeClaimList {
  errors: [JSON]!
  items: [persistentvolumeclaim_PersistentVolumeClaim]!
  listMeta: types_ListMeta!
}

type persistentvolumeclaim_PersistentVolumeClaim {
  accessModes: [String]!
  capacity: ObjMap!
  objectMeta: types_ObjectMeta!
  status: String!
  storageClass: String!
  typeMeta: types_TypeMeta!
  volume: String!
}

type query_handleGetPersistentVolumeClaimList_items_items_capacity {
  additionalProperties: [resource_Quantity3_entry] @dictionary(subgraph: "api")
}

type resource_Quantity3_entry {
  key: ID!
  value: resource_Quantity3
}

type resource_Quantity3 {
  Format: String!
  d: resource_infDecAmount!
  i: resource_int64Amount!
  s: String!
}

type persistentvolumeclaim_PersistentVolumeClaimDetail {
  accessModes: [String]!
  capacity: ObjMap!
  objectMeta: types_ObjectMeta!
  status: String!
  storageClass: String!
  typeMeta: types_TypeMeta!
  volume: String!
}

type query_handleGetPersistentVolumeClaimDetail_capacity {
  additionalProperties: [resource_Quantity4_entry] @dictionary(subgraph: "api")
}

type resource_Quantity4_entry {
  key: ID!
  value: resource_Quantity4
}

type resource_Quantity4 {
  Format: String!
  d: resource_infDecAmount!
  i: resource_int64Amount!
  s: String!
}

type pod_PodDetail {
  conditions: [common_Condition]!
  containers: [pod_Container]!
  controller: controller_ResourceOwner
  errors: [JSON]!
  eventList: common_EventList!
  imagePullSecrets: [v1_LocalObjectReference]
  initContainers: [pod_Container]!
  metrics: [api_Metric]!
  nodeName: String!
  objectMeta: types_ObjectMeta!
  persistentVolumeClaimList: persistentvolumeclaim_PersistentVolumeClaimList!
  podIP: String!
  podPhase: String!
  qosClass: String!
  restartCount: Int!
  securityContext: v1_PodSecurityContext!
  serviceAccountName: String!
  typeMeta: types_TypeMeta!
}

type pod_Container {
  args: [String]!
  commands: [String]!
  env: [pod_EnvVar]!
  image: String!
  livenessProbe: v1_Probe!
  name: String!
  readinessProbe: v1_Probe!
  resources: v1_ResourceRequirements
  securityContext: v1_SecurityContext!
  startupProbe: v1_Probe!
  state: ContainerState!
  status: v1_ContainerStatus!
  volumeMounts: [pod_VolumeMount]!
}

type pod_EnvVar {
  name: String!
  value: String!
  valueFrom: v1_EnvVarSource!
}

"""EnvVarSource represents a source for the value of an EnvVar."""
type v1_EnvVarSource {
  configMapKeyRef: v1_ConfigMapKeySelector
  fieldRef: v1_ObjectFieldSelector
  resourceFieldRef: v1_ResourceFieldSelector
  secretKeyRef: v1_SecretKeySelector
}

"""Selects a key from a ConfigMap."""
type v1_ConfigMapKeySelector {
  """The key to select."""
  key: String!
  """
  Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
  """Specify whether the ConfigMap or its key must be defined"""
  optional: Boolean
}

"""ObjectFieldSelector selects an APIVersioned field of an object."""
type v1_ObjectFieldSelector {
  """
  Version of the schema the FieldPath is written in terms of, defaults to "v1".
  """
  apiVersion: String
  """Path of the field to select in the specified API version."""
  fieldPath: String!
}

"""
ResourceFieldSelector represents container resources (cpu, memory) and their output format
"""
type v1_ResourceFieldSelector {
  """Container name: required for volumes, optional for env vars"""
  containerName: String
  divisor: String
  """Required: resource to select"""
  resource: String!
}

type resource_Quantity5 {
  Format: String!
  d: resource_infDecAmount!
  i: resource_int64Amount!
  s: String!
}

"""SecretKeySelector selects a key of a Secret."""
type v1_SecretKeySelector {
  """The key of the secret to select from.  Must be a valid secret key."""
  key: String!
  """
  Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
  """Specify whether the Secret or its key must be defined"""
  optional: Boolean
}

"""
Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
"""
type v1_Probe {
  exec: v1_ExecAction
  """
  Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
  """
  failureThreshold: Int
  grpc: v1_GRPCAction
  httpGet: v1_HTTPGetAction
  """
  Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  initialDelaySeconds: Int
  """
  How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
  """
  periodSeconds: Int
  """
  Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
  """
  successThreshold: Int
  tcpSocket: v1_TCPSocketAction
  """
  Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
  """
  terminationGracePeriodSeconds: BigInt
  """
  Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  timeoutSeconds: Int
}

"""ExecAction describes a "run in container" action."""
type v1_ExecAction {
  """
  Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
  """
  command: [String]
}

"""GRPCAction specifies an action involving a GRPC service."""
type v1_GRPCAction {
  """
  Port number of the gRPC service. Number must be in the range 1 to 65535.
  """
  port: Int!
  """
  Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
  
  If this is not specified, the default behavior is defined by gRPC.
  """
  service: String!
}

"""HTTPGetAction describes an action based on HTTP Get requests."""
type v1_HTTPGetAction {
  """
  Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
  """
  host: String
  """Custom headers to set in the request. HTTP allows repeated headers."""
  httpHeaders: [v1_HTTPHeader]
  """Path to access on the HTTP server."""
  path: String
  port: String!
  """Scheme to use for connecting to the host. Defaults to HTTP."""
  scheme: String
}

"""HTTPHeader describes a custom header to be used in HTTP probes"""
type v1_HTTPHeader {
  """
  The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
  """
  name: String!
  """The header field value"""
  value: String!
}

"""TCPSocketAction describes an action based on opening a socket"""
type v1_TCPSocketAction {
  """Optional: Host name to connect to, defaults to the pod IP."""
  host: String
  port: String!
}

"""ResourceRequirements describes the compute resource requirements."""
type v1_ResourceRequirements {
  """
  Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
  
  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
  
  This field is immutable. It can only be set for containers.
  """
  claims: [v1_ResourceClaim]
  limits: ObjMap!
  requests: ObjMap!
}

"""ResourceClaim references one entry in PodSpec.ResourceClaims."""
type v1_ResourceClaim {
  """
  Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
  """
  name: String!
  """
  Request is the name chosen for a request in the referenced claim. If empty, everything from the claim is made available, otherwise only the result of this request.
  """
  request: String
}

"""
Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
"""
type query_handleGetPodDetail_containers_items_resources_limits {
  additionalProperties: [resource_Quantity6_entry] @dictionary(subgraph: "api")
}

type resource_Quantity6_entry {
  key: ID!
  value: resource_Quantity6
}

type resource_Quantity6 {
  Format: String!
  d: resource_infDecAmount!
  i: resource_int64Amount!
  s: String!
}

"""
Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
"""
type query_handleGetPodDetail_containers_items_resources_requests {
  additionalProperties: [resource_Quantity7_entry] @dictionary(subgraph: "api")
}

type resource_Quantity7_entry {
  key: ID!
  value: resource_Quantity7
}

type resource_Quantity7 {
  Format: String!
  d: resource_infDecAmount!
  i: resource_int64Amount!
  s: String!
}

"""
SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
"""
type v1_SecurityContext {
  """
  AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
  """
  allowPrivilegeEscalation: Boolean
  appArmorProfile: v1_AppArmorProfile
  capabilities: v1_Capabilities
  """
  Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
  """
  privileged: Boolean
  """
  procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
  """
  procMount: String
  """
  Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
  """
  readOnlyRootFilesystem: Boolean
  """
  The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
  """
  runAsGroup: BigInt
  """
  Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
  """
  runAsNonRoot: Boolean
  """
  The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
  """
  runAsUser: BigInt
  seLinuxOptions: v1_SELinuxOptions
  seccompProfile: v1_SeccompProfile
  windowsOptions: v1_WindowsSecurityContextOptions
}

"""AppArmorProfile defines a pod or container's AppArmor settings."""
type v1_AppArmorProfile {
  """
  localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is "Localhost".
  """
  localhostProfile: String
  """
  type indicates which kind of AppArmor profile will be applied. Valid options are:
    Localhost - a profile pre-loaded on the node.
    RuntimeDefault - the container runtime's default profile.
    Unconfined - no AppArmor enforcement.
  """
  type: String!
}

"""Adds and removes POSIX capabilities from running containers."""
type v1_Capabilities {
  """Added capabilities"""
  add: [String]
  """Removed capabilities"""
  drop: [String]
}

"""SELinuxOptions are the labels to be applied to the container"""
type v1_SELinuxOptions {
  """Level is SELinux level label that applies to the container."""
  level: String
  """Role is a SELinux role label that applies to the container."""
  role: String
  """Type is a SELinux type label that applies to the container."""
  type: String
  """User is a SELinux user label that applies to the container."""
  user: String
}

"""
SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
"""
type v1_SeccompProfile {
  """
  localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
  """
  localhostProfile: String
  """
  type indicates which kind of seccomp profile will be applied. Valid options are:
  
  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
  """
  type: String!
}

"""
WindowsSecurityContextOptions contain Windows-specific options and credentials.
"""
type v1_WindowsSecurityContextOptions {
  """
  GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
  """
  gmsaCredentialSpec: String
  """GMSACredentialSpecName is the name of the GMSA credential spec to use."""
  gmsaCredentialSpecName: String
  """
  HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
  """
  hostProcess: Boolean
  """
  The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
  """
  runAsUserName: String
}

"""
ContainerStatus contains details for the current status of this container.
"""
type v1_ContainerStatus {
  allocatedResources: ObjMap!
  """
  AllocatedResourcesStatus represents the status of various resources allocated for this Pod.
  """
  allocatedResourcesStatus: [v1_ResourceStatus]
  """
  ContainerID is the ID of the container in the format '<type>://<container_id>'. Where type is a container runtime identifier, returned from Version call of CRI API (for example "containerd").
  """
  containerID: String
  """
  Image is the name of container image that the container is running. The container image may not match the image used in the PodSpec, as it may have been resolved by the runtime. More info: https://kubernetes.io/docs/concepts/containers/images.
  """
  image: String!
  """
  ImageID is the image ID of the container's image. The image ID may not match the image ID of the image used in the PodSpec, as it may have been resolved by the runtime.
  """
  imageID: String!
  lastState: v1_ContainerState
  """
  Name is a DNS_LABEL representing the unique name of the container. Each container in a pod must have a unique name across all container types. Cannot be updated.
  """
  name: String!
  """
  Ready specifies whether the container is currently passing its readiness check. The value will change as readiness probes keep executing. If no readiness probes are specified, this field defaults to true once the container is fully started (see Started field).
  
  The value is typically used to determine whether a container is ready to accept traffic.
  """
  ready: Boolean!
  resources: v1_ResourceRequirements
  """
  RestartCount holds the number of times the container has been restarted. Kubelet makes an effort to always increment the value, but there are cases when the state may be lost due to node restarts and then the value may be reset to 0. The value is never negative.
  """
  restartCount: Int!
  """
  Started indicates whether the container has finished its postStart lifecycle hook and passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. In both cases, startup probes will run again. Is always true when no startupProbe is defined and container is running and has passed the postStart lifecycle hook. The null value must be treated the same as false.
  """
  started: Boolean
  state: v1_ContainerState
  user: v1_ContainerUser
  """Status of volume mounts."""
  volumeMounts: [v1_VolumeMountStatus]
}

"""
AllocatedResources represents the compute resources allocated for this container by the node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission and after successfully admitting desired pod resize.
"""
type query_handleGetPodDetail_containers_items_status_allocatedResources {
  additionalProperties: [resource_Quantity8_entry] @dictionary(subgraph: "api")
}

type resource_Quantity8_entry {
  key: ID!
  value: resource_Quantity8
}

type resource_Quantity8 {
  Format: String!
  d: resource_infDecAmount!
  i: resource_int64Amount!
  s: String!
}

"""
ResourceStatus represents the status of a single resource allocated to a Pod.
"""
type v1_ResourceStatus {
  """
  Name of the resource. Must be unique within the pod and in case of non-DRA resource, match one of the resources from the pod spec. For DRA resources, the value must be "claim:<claim_name>/<request>". When this status is reported about a container, the "claim_name" and "request" must match one of the claims of this container.
  """
  name: String!
  """
  List of unique resources health. Each element in the list contains an unique resource ID and its health. At a minimum, for the lifetime of a Pod, resource ID must uniquely identify the resource allocated to the Pod on the Node. If other Pod on the same Node reports the status with the same resource ID, it must be the same resource they share. See ResourceID type definition for a specific format it has in various use cases.
  """
  resources: [v1_ResourceHealth]
}

"""
ResourceHealth represents the health of a resource. It has the latest device health information. This is a part of KEP https://kep.k8s.io/4680.
"""
type v1_ResourceHealth {
  """
  Health of the resource. can be one of:
   - Healthy: operates as normal
   - Unhealthy: reported unhealthy. We consider this a temporary health issue
                since we do not have a mechanism today to distinguish
                temporary and permanent issues.
   - Unknown: The status cannot be determined.
              For example, Device Plugin got unregistered and hasn't been re-registered since.
  
  In future we may want to introduce the PermanentlyUnhealthy Status.
  """
  health: String
  """
  ResourceID is the unique identifier of the resource. See the ResourceID type for more information.
  """
  resourceID: String!
}

"""
ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
"""
type v1_ContainerState {
  running: v1_ContainerStateRunning
  terminated: v1_ContainerStateTerminated
  waiting: v1_ContainerStateWaiting
}

"""ContainerStateRunning is a running state of a container."""
type v1_ContainerStateRunning {
  startedAt: String
}

"""ContainerStateTerminated is a terminated state of a container."""
type v1_ContainerStateTerminated {
  """Container's ID in the format '<type>://<container_id>'"""
  containerID: String
  """Exit status from the last termination of the container"""
  exitCode: Int!
  finishedAt: String
  """Message regarding the last termination of the container"""
  message: String
  """(brief) reason from the last termination of the container"""
  reason: String
  """Signal from the last termination of the container"""
  signal: Int
  startedAt: String
}

"""ContainerStateWaiting is a waiting state of a container."""
type v1_ContainerStateWaiting {
  """Message regarding why the container is not yet running."""
  message: String
  """(brief) reason the container is not yet running."""
  reason: String
}

"""ContainerUser represents user identity information"""
type v1_ContainerUser {
  linux: v1_LinuxContainerUser
}

"""
LinuxContainerUser represents user identity information in Linux containers
"""
type v1_LinuxContainerUser {
  """
  GID is the primary gid initially attached to the first process in the container
  """
  gid: BigInt!
  """
  SupplementalGroups are the supplemental groups initially attached to the first process in the container
  """
  supplementalGroups: [BigInt]
  """
  UID is the primary uid initially attached to the first process in the container
  """
  uid: BigInt!
}

"""VolumeMountStatus shows status of volume mounts."""
type v1_VolumeMountStatus {
  """MountPath corresponds to the original VolumeMount."""
  mountPath: String!
  """Name corresponds to the name of the original VolumeMount."""
  name: String!
  """ReadOnly corresponds to the original VolumeMount."""
  readOnly: Boolean
  """
  RecursiveReadOnly must be set to Disabled, Enabled, or unspecified (for non-readonly mounts). An IfPossible value in the original VolumeMount must be translated to Disabled or Enabled, depending on the mount result.
  """
  recursiveReadOnly: String
}

type pod_VolumeMount {
  mountPath: String!
  name: String!
  readOnly: Boolean!
  subPath: String!
  volume: v1_Volume!
}

"""
Volume represents a named volume in a pod that may be accessed by any container in the pod.
"""
type v1_Volume {
  awsElasticBlockStore: v1_AWSElasticBlockStoreVolumeSource
  azureDisk: v1_AzureDiskVolumeSource
  azureFile: v1_AzureFileVolumeSource
  cephfs: v1_CephFSVolumeSource
  cinder: v1_CinderVolumeSource
  configMap: v1_ConfigMapVolumeSource
  csi: v1_CSIVolumeSource
  downwardAPI: v1_DownwardAPIVolumeSource
  emptyDir: v1_EmptyDirVolumeSource
  ephemeral: v1_EphemeralVolumeSource
  fc: v1_FCVolumeSource
  flexVolume: v1_FlexVolumeSource
  flocker: v1_FlockerVolumeSource
  gcePersistentDisk: v1_GCEPersistentDiskVolumeSource
  gitRepo: v1_GitRepoVolumeSource
  glusterfs: v1_GlusterfsVolumeSource
  hostPath: v1_HostPathVolumeSource
  image: v1_ImageVolumeSource
  iscsi: v1_ISCSIVolumeSource
  """
  name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String!
  nfs: v1_NFSVolumeSource
  persistentVolumeClaim: v1_PersistentVolumeClaimVolumeSource
  photonPersistentDisk: v1_PhotonPersistentDiskVolumeSource
  portworxVolume: v1_PortworxVolumeSource
  projected: v1_ProjectedVolumeSource
  quobyte: v1_QuobyteVolumeSource
  rbd: v1_RBDVolumeSource
  scaleIO: v1_ScaleIOVolumeSource
  secret: v1_SecretVolumeSource
  storageos: v1_StorageOSVolumeSource
  vsphereVolume: v1_VsphereVirtualDiskVolumeSource
}

"""
AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
"""
type v1_AzureFileVolumeSource {
  """
  readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean
  """
  secretName is the  name of secret that contains Azure Storage Account Name and Key
  """
  secretName: String!
  """shareName is the azure share Name"""
  shareName: String!
}

"""
Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
"""
type v1_CephFSVolumeSource {
  """
  monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  monitors: [String]!
  """
  path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
  """
  path: String
  """
  readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  readOnly: Boolean
  """
  secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  secretFile: String
  secretRef: v1_LocalObjectReference
  """
  user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  user: String
}

"""
LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
"""
type v1_LocalObjectReference {
  """
  Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
}

"""
Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
"""
type v1_CinderVolumeSource {
  """
  fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  """
  fsType: String
  """
  readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  """
  readOnly: Boolean
  secretRef: v1_LocalObjectReference
  """
  volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  """
  volumeID: String!
}

"""
Adapts a ConfigMap into a volume.

The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
"""
type v1_ConfigMapVolumeSource {
  """
  defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  """
  defaultMode: Int
  """
  items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
  """
  items: [v1_KeyToPath]
  """
  Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
  """optional specify whether the ConfigMap or its keys must be defined"""
  optional: Boolean
}

"""Maps a string key to a path within a volume."""
type v1_KeyToPath {
  """key is the key to project."""
  key: String!
  """
  mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  """
  mode: Int
  """
  path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
  """
  path: String!
}

"""
Represents a source location of a volume to mount, managed by an external CSI driver
"""
type v1_CSIVolumeSource {
  """
  driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
  """
  driver: String!
  """
  fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
  """
  fsType: String
  nodePublishSecretRef: v1_LocalObjectReference
  """
  readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
  """
  readOnly: Boolean
  """
  volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
  """
  volumeAttributes: JSON
}

"""
DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
"""
type v1_DownwardAPIVolumeSource {
  """
  Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  """
  defaultMode: Int
  """Items is a list of downward API volume file"""
  items: [v1_DownwardAPIVolumeFile]
}

"""
DownwardAPIVolumeFile represents information to create the file containing the pod field
"""
type v1_DownwardAPIVolumeFile {
  fieldRef: v1_ObjectFieldSelector
  """
  Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  """
  mode: Int
  """
  Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
  """
  path: String!
  resourceFieldRef: v1_ResourceFieldSelector
}

"""
Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
"""
type v1_EmptyDirVolumeSource {
  """
  medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
  """
  medium: String
  sizeLimit: String
}

"""
Represents an ephemeral volume that is handled by a normal storage driver.
"""
type v1_EphemeralVolumeSource {
  volumeClaimTemplate: v1_PersistentVolumeClaimTemplate
}

"""
PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
"""
type v1_PersistentVolumeClaimTemplate {
  metadata: v1_ObjectMeta
  spec: v1_PersistentVolumeClaimSpec!
}

"""
ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
"""
type v1_ObjectMeta {
  """
  Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
  """
  annotations: JSON
  creationTimestamp: String
  """
  Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  """
  deletionGracePeriodSeconds: BigInt
  deletionTimestamp: String
  """
  Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
  """
  finalizers: [String]
  """
  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
  
  If this field is specified and the generated name exists, the server will return a 409.
  
  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
  """
  generateName: String
  """
  A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  """
  generation: BigInt
  """
  Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
  """
  labels: JSON
  """
  ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
  """
  managedFields: [v1_ManagedFieldsEntry]
  """
  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
  """
  name: String
  """
  Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
  
  Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
  """
  namespace: String
  """
  List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  """
  ownerReferences: [v1_OwnerReference]
  """
  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
  
  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String
  """
  Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
  """
  selfLink: String
  """
  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
  
  Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
  """
  uid: String
}

"""
ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
"""
type v1_ManagedFieldsEntry {
  """
  APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
  """
  apiVersion: String
  """
  FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
  """
  fieldsType: String
  """
  FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.
  
  Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.
  
  The exact format is defined in sigs.k8s.io/structured-merge-diff
  """
  fieldsV1: JSON
  """Manager is an identifier of the workflow managing these fields."""
  manager: String
  """
  Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
  """
  operation: String
  """
  Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
  """
  subresource: String
  time: String
}

"""
OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
"""
type v1_OwnerReference {
  """API version of the referent."""
  apiVersion: String!
  """
  If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
  """
  blockOwnerDeletion: Boolean
  """If true, this reference points to the managing controller."""
  controller: Boolean
  """
  Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String!
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
  """
  name: String!
  """
  UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
  """
  uid: String!
}

"""
PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
"""
type v1_PersistentVolumeClaimSpec {
  """
  accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
  """
  accessModes: [String]
  dataSource: v1_TypedLocalObjectReference
  dataSourceRef: v1_TypedObjectReference
  resources: v1_VolumeResourceRequirements
  selector: v1_LabelSelector
  """
  storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
  """
  storageClassName: String
  """
  volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim. If specified, the CSI driver will create or update the volume with the attributes defined in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName, it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass will be applied to the claim but it's not allowed to reset this field to empty string once it is set. If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass will be set by the persistentvolume controller if it exists. If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/ (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
  """
  volumeAttributesClassName: String
  """
  volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
  """
  volumeMode: String
  """
  volumeName is the binding reference to the PersistentVolume backing this claim.
  """
  volumeName: String
}

"""
TypedObjectReference contains enough information to let you locate the typed referenced object
"""
type v1_TypedObjectReference {
  """
  APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
  """
  apiGroup: String!
  """Kind is the type of resource being referenced"""
  kind: String!
  """Name is the name of resource being referenced"""
  name: String!
  """
  Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
  """
  namespace: String
}

"""
VolumeResourceRequirements describes the storage resource requirements for a volume.
"""
type v1_VolumeResourceRequirements {
  limits: ObjMap!
  requests: ObjMap!
}

"""
Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
"""
type query_handleGetPodDetail_containers_items_volumeMounts_items_volume_ephemeral_volumeClaimTemplate_spec_resources_limits {
  additionalProperties: [resource_Quantity9_entry] @dictionary(subgraph: "api")
}

type resource_Quantity9_entry {
  key: ID!
  value: resource_Quantity9
}

type resource_Quantity9 {
  Format: String!
  d: resource_infDecAmount!
  i: resource_int64Amount!
  s: String!
}

"""
Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
"""
type query_handleGetPodDetail_containers_items_volumeMounts_items_volume_ephemeral_volumeClaimTemplate_spec_resources_requests {
  additionalProperties: [resource_Quantity10_entry] @dictionary(subgraph: "api")
}

type resource_Quantity10_entry {
  key: ID!
  value: resource_Quantity10
}

type resource_Quantity10 {
  Format: String!
  d: resource_infDecAmount!
  i: resource_int64Amount!
  s: String!
}

"""
FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
"""
type v1_FlexVolumeSource {
  """driver is the name of the driver to use for this volume."""
  driver: String!
  """
  fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
  """
  fsType: String
  """options is Optional: this field holds extra command options if any."""
  options: JSON
  """
  readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean
  secretRef: v1_LocalObjectReference
}

"""
Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.

DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
"""
type v1_GitRepoVolumeSource {
  """
  directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
  """
  directory: String
  """repository is the URL"""
  repository: String!
  """revision is the commit hash for the specified revision."""
  revision: String
}

"""
Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
"""
type v1_GlusterfsVolumeSource {
  """
  endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
  """
  endpoints: String!
  """
  path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
  """
  path: String!
  """
  readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
  """
  readOnly: Boolean
}

"""ImageVolumeSource represents a image volume resource."""
type v1_ImageVolumeSource {
  """
  Policy for pulling OCI objects. Possible values are: Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails. Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present. IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
  """
  pullPolicy: String
  """
  Required: Image or artifact reference to be used. Behaves in the same way as pod.spec.containers[*].image. Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
  """
  reference: String
}

"""
Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
"""
type v1_ISCSIVolumeSource {
  """
  chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
  """
  chapAuthDiscovery: Boolean
  """
  chapAuthSession defines whether support iSCSI Session CHAP authentication
  """
  chapAuthSession: Boolean
  """
  fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
  """
  fsType: String
  """
  initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
  """
  initiatorName: String
  """iqn is the target iSCSI Qualified Name."""
  iqn: String!
  """
  iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
  """
  iscsiInterface: String
  """lun represents iSCSI Target Lun number."""
  lun: Int!
  """
  portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
  """
  portals: [String]
  """
  readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
  """
  readOnly: Boolean
  secretRef: v1_LocalObjectReference
  """
  targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
  """
  targetPortal: String!
}

"""
PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
"""
type v1_PersistentVolumeClaimVolumeSource {
  """
  claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
  """
  claimName: String!
  """
  readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
  """
  readOnly: Boolean
}

"""Represents a projected volume source"""
type v1_ProjectedVolumeSource {
  """
  defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  """
  defaultMode: Int
  """
  sources is the list of volume projections. Each entry in this list handles one source.
  """
  sources: [v1_VolumeProjection]!
}

"""
Projection that may be projected along with other supported volume types. Exactly one of these fields must be set.
"""
type v1_VolumeProjection {
  clusterTrustBundle: v1_ClusterTrustBundleProjection
  configMap: v1_ConfigMapProjection
  downwardAPI: v1_DownwardAPIProjection
  secret: v1_SecretProjection
  serviceAccountToken: v1_ServiceAccountTokenProjection
}

"""
ClusterTrustBundleProjection describes how to select a set of ClusterTrustBundle objects and project their contents into the pod filesystem.
"""
type v1_ClusterTrustBundleProjection {
  labelSelector: v1_LabelSelector
  """
  Select a single ClusterTrustBundle by object name.  Mutually-exclusive with signerName and labelSelector.
  """
  name: String
  """
  If true, don't block pod startup if the referenced ClusterTrustBundle(s) aren't available.  If using name, then the named ClusterTrustBundle is allowed not to exist.  If using signerName, then the combination of signerName and labelSelector is allowed to match zero ClusterTrustBundles.
  """
  optional: Boolean
  """Relative path from the volume root to write the bundle."""
  path: String!
  """
  Select all ClusterTrustBundles that match this signer name. Mutually-exclusive with name.  The contents of all selected ClusterTrustBundles will be unified and deduplicated.
  """
  signerName: String
}

"""
Adapts a ConfigMap into a projected volume.

The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
"""
type v1_ConfigMapProjection {
  """
  items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
  """
  items: [v1_KeyToPath]
  """
  Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
  """optional specify whether the ConfigMap or its keys must be defined"""
  optional: Boolean
}

"""
Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
"""
type v1_DownwardAPIProjection {
  """Items is a list of DownwardAPIVolume file"""
  items: [v1_DownwardAPIVolumeFile]
}

"""
Adapts a secret into a projected volume.

The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
"""
type v1_SecretProjection {
  """
  items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
  """
  items: [v1_KeyToPath]
  """
  Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
  """optional field specify whether the Secret or its key must be defined"""
  optional: Boolean
}

"""
ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
"""
type v1_ServiceAccountTokenProjection {
  """
  audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
  """
  audience: String
  """
  expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
  """
  expirationSeconds: BigInt
  """
  path is the path relative to the mount point of the file to project the token into.
  """
  path: String!
}

"""
Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
"""
type v1_RBDVolumeSource {
  """
  fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
  """
  fsType: String
  """
  image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  image: String!
  """
  keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  keyring: String
  """
  monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  monitors: [String]!
  """
  pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  pool: String
  """
  readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  readOnly: Boolean
  secretRef: v1_LocalObjectReference
  """
  user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  user: String
}

"""ScaleIOVolumeSource represents a persistent ScaleIO volume"""
type v1_ScaleIOVolumeSource {
  """
  fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
  """
  fsType: String
  """gateway is the host address of the ScaleIO API Gateway."""
  gateway: String!
  """
  protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
  """
  protectionDomain: String
  """
  readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean
  secretRef: v1_LocalObjectReference!
  """
  sslEnabled Flag enable/disable SSL communication with Gateway, default false
  """
  sslEnabled: Boolean
  """
  storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
  """
  storageMode: String
  """
  storagePool is the ScaleIO Storage Pool associated with the protection domain.
  """
  storagePool: String
  """system is the name of the storage system as configured in ScaleIO."""
  system: String!
  """
  volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
  """
  volumeName: String
}

"""
Adapts a Secret into a volume.

The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
"""
type v1_SecretVolumeSource {
  """
  defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  """
  defaultMode: Int
  """
  items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
  """
  items: [v1_KeyToPath]
  """optional field specify whether the Secret or its keys must be defined"""
  optional: Boolean
  """
  secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
  """
  secretName: String
}

"""Represents a StorageOS persistent volume resource."""
type v1_StorageOSVolumeSource {
  """
  fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
  """
  fsType: String
  """
  readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean
  secretRef: v1_LocalObjectReference
  """
  volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
  """
  volumeName: String
  """
  volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
  """
  volumeNamespace: String
}

type controller_ResourceOwner {
  containerImages: [String]!
  initContainerImages: [String]!
  objectMeta: types_ObjectMeta!
  pods: common_PodInfo!
  typeMeta: types_TypeMeta!
}

"""
PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
"""
type v1_PodSecurityContext {
  appArmorProfile: v1_AppArmorProfile
  """
  A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
  
  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw
  """
  fsGroup: BigInt
  """
  fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
  """
  fsGroupChangePolicy: String
  """
  The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
  """
  runAsGroup: BigInt
  """
  Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
  """
  runAsNonRoot: Boolean
  """
  The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
  """
  runAsUser: BigInt
  """
  seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod. It has no effect on nodes that do not support SELinux or to volumes does not support SELinux. Valid values are "MountOption" and "Recursive".
  
  "Recursive" means relabeling of all files on all Pod volumes by the container runtime. This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.
  
  "MountOption" mounts all eligible Pod volumes with `-o context` mount option. This requires all Pods that share the same volume to use the same SELinux label. It is not possible to share the same volume among privileged and unprivileged Pods. Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their CSIDriver instance. Other volumes are always re-labelled recursively. "MountOption" value is allowed only when SELinuxMount feature gate is enabled.
  
  If not specified and SELinuxMount feature gate is enabled, "MountOption" is used. If not specified and SELinuxMount feature gate is disabled, "MountOption" is used for ReadWriteOncePod volumes and "Recursive" for all other volumes.
  
  This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.
  
  All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state. Note that this field cannot be set when spec.os.name is windows.
  """
  seLinuxChangePolicy: String
  seLinuxOptions: v1_SELinuxOptions
  seccompProfile: v1_SeccompProfile
  """
  A list of groups applied to the first process run in each container, in addition to the container's primary GID and fsGroup (if specified).  If the SupplementalGroupsPolicy feature is enabled, the supplementalGroupsPolicy field determines whether these are in addition to or instead of any group memberships defined in the container image. If unspecified, no additional groups are added, though group memberships defined in the container image may still be used, depending on the supplementalGroupsPolicy field. Note that this field cannot be set when spec.os.name is windows.
  """
  supplementalGroups: [BigInt]
  """
  Defines how supplemental groups of the first container processes are calculated. Valid values are "Merge" and "Strict". If not specified, "Merge" is used. (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled and the container runtime must implement support for this feature. Note that this field cannot be set when spec.os.name is windows.
  """
  supplementalGroupsPolicy: String
  """
  Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
  """
  sysctls: [v1_Sysctl]
  windowsOptions: v1_WindowsSecurityContextOptions
}

"""Sysctl defines a kernel parameter to be set"""
type v1_Sysctl {
  """Name of a property to set"""
  name: String!
  """Value of a property to set"""
  value: String!
}

type handler_TerminalResponse {
  id: String!
}

type poddisruptionbudget_PodDisruptionBudgetList {
  errors: [JSON]!
  items: [poddisruptionbudget_PodDisruptionBudget]!
  listMeta: types_ListMeta!
}

type poddisruptionbudget_PodDisruptionBudget {
  currentHealthy: Int!
  desiredHealthy: Int!
  disruptionsAllowed: Int!
  expectedPods: Int!
  labelSelector: v1_LabelSelector
  maxUnavailable: intstr_IntOrString!
  minAvailable: intstr_IntOrString!
  objectMeta: types_ObjectMeta!
  typeMeta: types_TypeMeta!
  unhealthyPodEvictionPolicy: String!
}

type poddisruptionbudget_PodDisruptionBudgetDetail {
  currentHealthy: Int!
  desiredHealthy: Int!
  disruptedPods: JSON!
  disruptionsAllowed: Int!
  expectedPods: Int!
  labelSelector: v1_LabelSelector
  maxUnavailable: intstr_IntOrString!
  minAvailable: intstr_IntOrString!
  objectMeta: types_ObjectMeta!
  typeMeta: types_TypeMeta!
  unhealthyPodEvictionPolicy: String!
}

type replicaset_ReplicaSetDetail {
  containerImages: [String]!
  errors: [JSON]!
  horizontalPodAutoscalerList: horizontalpodautoscaler_HorizontalPodAutoscalerList!
  initContainerImages: [String]!
  objectMeta: types_ObjectMeta!
  podInfo: common_PodInfo!
  selector: v1_LabelSelector!
  typeMeta: types_TypeMeta!
}

type replicationcontroller_ReplicationControllerList {
  cumulativeMetrics: [api_Metric]!
  errors: [JSON]!
  listMeta: types_ListMeta!
  replicationControllers: [replicationcontroller_ReplicationController]!
  status: common_ResourceStatus!
}

type replicationcontroller_ReplicationController {
  containerImages: [String]!
  initContainerImages: [String]!
  objectMeta: types_ObjectMeta!
  podInfo: common_PodInfo!
  typeMeta: types_TypeMeta!
}

type replicationcontroller_ReplicationControllerDetail {
  containerImages: [String]!
  errors: [JSON]!
  initContainerImages: [String]!
  labelSelector: JSON!
  objectMeta: types_ObjectMeta!
  podInfo: common_PodInfo!
  typeMeta: types_TypeMeta!
}

type role_RoleList {
  errors: [JSON]!
  items: [role_Role]!
  listMeta: types_ListMeta!
}

type role_Role {
  objectMeta: types_ObjectMeta!
  typeMeta: types_TypeMeta!
}

type role_RoleDetail {
  errors: [JSON]!
  objectMeta: types_ObjectMeta!
  rules: [v1_PolicyRule]!
  typeMeta: types_TypeMeta!
}

type rolebinding_RoleBindingList {
  errors: [JSON]!
  items: [rolebinding_RoleBinding]!
  listMeta: types_ListMeta!
}

type rolebinding_RoleBinding {
  objectMeta: types_ObjectMeta!
  typeMeta: types_TypeMeta!
}

type rolebinding_RoleBindingDetail {
  errors: [JSON]!
  objectMeta: types_ObjectMeta!
  roleRef: v1_RoleRef!
  subjects: [v1_Subject]
  typeMeta: types_TypeMeta!
}

type scaling_ReplicaCounts {
  actualReplicas: Int!
  desiredReplicas: Int!
}

type secret_SecretList {
  errors: [JSON]!
  listMeta: types_ListMeta!
  secrets: [secret_Secret]!
}

type secret_Secret {
  objectMeta: types_ObjectMeta!
  type: String!
  typeMeta: types_TypeMeta!
}

type secret_SecretDetail {
  data: JSON!
  objectMeta: types_ObjectMeta!
  type: String!
  typeMeta: types_TypeMeta!
}

type service_ServiceDetail {
  clusterIP: String!
  endpointList: endpoint_EndpointList!
  errors: [JSON]!
  externalEndpoints: [common_Endpoint]!
  internalEndpoint: common_Endpoint!
  objectMeta: types_ObjectMeta!
  selector: JSON!
  sessionAffinity: String!
  type: String!
  typeMeta: types_TypeMeta!
}

type endpoint_EndpointList {
  endpoints: [endpoint_Endpoint]!
  listMeta: types_ListMeta!
}

type endpoint_Endpoint {
  host: String!
  nodeName: String!
  objectMeta: types_ObjectMeta!
  ports: [v1_EndpointPort]!
  ready: Boolean!
  typeMeta: types_TypeMeta!
}

"""EndpointPort is a tuple that describes a single port."""
type v1_EndpointPort {
  """
  The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:
  
  * Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).
  
  * Kubernetes-defined prefixed names:
    * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
    * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
    * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
  
  * Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.
  """
  appProtocol: String
  """
  The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.
  """
  name: String
  """The port number of the endpoint."""
  port: Int!
  """
  The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
  """
  protocol: String
}

type serviceaccount_ServiceAccountList {
  errors: [JSON]!
  items: [serviceaccount_ServiceAccount]!
  listMeta: types_ListMeta!
}

type serviceaccount_ServiceAccount {
  objectMeta: types_ObjectMeta!
  typeMeta: types_TypeMeta!
}

type serviceaccount_ServiceAccountDetail {
  errors: [JSON]!
  objectMeta: types_ObjectMeta!
  typeMeta: types_TypeMeta!
}

type statefulset_StatefulSetList {
  cumulativeMetrics: [api_Metric]!
  errors: [JSON]!
  listMeta: types_ListMeta!
  statefulSets: [statefulset_StatefulSet]!
  status: common_ResourceStatus!
}

type statefulset_StatefulSet {
  containerImages: [String]!
  initContainerImages: [String]!
  objectMeta: types_ObjectMeta!
  podInfo: common_PodInfo!
  typeMeta: types_TypeMeta!
}

type statefulset_StatefulSetDetail {
  containerImages: [String]!
  errors: [JSON]!
  initContainerImages: [String]!
  objectMeta: types_ObjectMeta!
  podInfo: common_PodInfo!
  typeMeta: types_TypeMeta!
}

type storageclass_StorageClassList {
  errors: [JSON]!
  items: [storageclass_StorageClass]!
  listMeta: types_ListMeta!
}

type storageclass_StorageClass {
  objectMeta: types_ObjectMeta!
  parameters: JSON!
  provisioner: String!
  typeMeta: types_TypeMeta!
}

type Mutation {
  """creates or updates a resource in a namespace"""
  handlePutResource(
    """kind of the resource"""
    kind: String!
    """name of the resource"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    input: JSON!
    """namespace of the resource"""
    namespace: String!
  ): Void @httpOperation(subgraph: "api", path: "/api/v1/_raw/{args.kind}/name/{args.name}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: PUT, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}") @httpOperation(subgraph: "api", path: "/api/v1/_raw/{args.kind}/namespace/{args.namespace}/name/{args.name}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: PUT, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """deletes a resource from a namespace"""
  handleDeleteResource(
    """kind of the resource"""
    kind: String!
    """name of the resource"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """override graceful delete options and enforce immediate deletion"""
    deleteNow: String
    """override default delete propagation policy"""
    propagation: String
    """namespace of the resource"""
    namespace: String!
  ): Void @httpOperation(subgraph: "api", path: "/api/v1/_raw/{args.kind}/name/{args.name}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: DELETE, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\",\"deleteNow\":\"deleteNow\",\"propagation\":\"propagation\"}") @httpOperation(subgraph: "api", path: "/api/v1/_raw/{args.kind}/namespace/{args.namespace}/name/{args.name}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: DELETE, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\",\"deleteNow\":\"deleteNow\",\"propagation\":\"propagation\"}")
  """creates an application based on provided deployment.AppDeploymentSpec"""
  handleDeploy(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    input: deployment_AppDeploymentSpec_Input!
  ): deployment_AppDeploymentSpec! @httpOperation(subgraph: "api", path: "/api/v1/appdeployment", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: POST, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """checks if provided image is valid"""
  handleImageReferenceValidity(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    input: validation_ImageReferenceValiditySpec_Input!
  ): validation_ImageReferenceValidity @httpOperation(subgraph: "api", path: "/api/v1/appdeployment/validate/imagereference", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: POST, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """checks if provided name is valid"""
  handleNameValidity(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    input: validation_AppNameValiditySpec_Input!
  ): validation_AppNameValidity @httpOperation(subgraph: "api", path: "/api/v1/appdeployment/validate/name", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: POST, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """checks if provided service protocol is valid"""
  handleProtocolValidity(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    input: validation_ProtocolValiditySpec_Input!
  ): validation_ProtocolValidity @httpOperation(subgraph: "api", path: "/api/v1/appdeployment/validate/protocol", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: POST, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """create an application from file"""
  handleDeployFromFile(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    input: deployment_AppDeploymentFromFileSpec_Input!
  ): deployment_AppDeploymentFromFileResponse @httpOperation(subgraph: "api", path: "/api/v1/appdeploymentfromfile", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: POST, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """triggers a Job based on CronJob"""
  handleTriggerCronJob(
    """namespace of the CronJob"""
    namespace: String!
    """name of the CronJob"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): JSON @httpOperation(subgraph: "api", path: "/api/v1/cronjob/{args.namespace}/{args.name}/trigger", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: PUT, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """rollout restart of the Daemon Set"""
  handleDaemonSetRestart(
    """namespace of the Daemon Set"""
    namespace: String!
    """name of the Daemon Set"""
    daemonSet: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): daemonset_DaemonSetDetail @httpOperation(subgraph: "api", path: "/api/v1/daemonset/{args.namespace}/{args.daemonSet}/restart", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: PUT, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """pauses the Deployment"""
  handleDeploymentPause(
    """namespace of the Deployment"""
    namespace: String!
    """name of the Deployment"""
    deployment: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): deployment_DeploymentDetail @httpOperation(subgraph: "api", path: "/api/v1/deployment/{args.namespace}/{args.deployment}/pause", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: PUT, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """rollout restart of the Deployment"""
  handleDeploymentRestart(
    """namespace of the Deployment"""
    namespace: String!
    """name of the Deployment"""
    deployment: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): deployment_RolloutSpec! @httpOperation(subgraph: "api", path: "/api/v1/deployment/{args.namespace}/{args.deployment}/restart", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: PUT, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """resumes the Deployment"""
  handleDeploymentResume(
    """namespace of the Deployment"""
    namespace: String!
    """name of the Deployment"""
    deployment: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): deployment_DeploymentDetail @httpOperation(subgraph: "api", path: "/api/v1/deployment/{args.namespace}/{args.deployment}/resume", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: PUT, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """rolls back the Deployment to the target revision"""
  handleDeploymentRollback(
    """namespace of the Deployment"""
    namespace: String!
    """name of the Deployment"""
    deployment: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    input: deployment_RolloutSpec_Input!
  ): deployment_RolloutSpec! @httpOperation(subgraph: "api", path: "/api/v1/deployment/{args.namespace}/{args.deployment}/rollback", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: PUT, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """create a Namespace"""
  handleCreateNamespace(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    input: namespace_NamespaceSpec_Input!
  ): namespace_NamespaceSpec! @httpOperation(subgraph: "api", path: "/api/v1/namespace", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: POST, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """drains Node"""
  handleNodeDrain(
    """name of the Node"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    input: node_NodeDrainSpec_Input!
  ): JSON @httpOperation(subgraph: "api", path: "/api/v1/node/{args.name}/drain", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: PUT, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """scales ReplicationController to a number of replicas"""
  handleUpdateReplicasCount(
    """namespace of the ReplicationController"""
    namespace: String!
    """name of the ReplicationController"""
    replicationController: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    input: replicationcontroller_ReplicationControllerSpec_Input!
  ): JSON @httpOperation(subgraph: "api", path: "/api/v1/replicationcontroller/{args.namespace}/{args.replicationController}/update/pod", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: POST, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """scales a non-namespaced resource"""
  handleScaleResource(
    """kind of the resource"""
    kind: String!
    """namespace of the resource"""
    namespace: String!
    """name of the resource"""
    name: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    """desired number of replicas"""
    scaleBy: String
  ): scaling_ReplicaCounts @httpOperation(subgraph: "api", path: "/api/v1/scale/{args.kind}/{args.namespace}/{args.name}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: PUT, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\",\"scaleBy\":\"scaleBy\"}") @httpOperation(subgraph: "api", path: "/api/v1/scale/{args.kind}/{args.name}", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: PUT, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\",\"scaleBy\":\"scaleBy\"}")
  """stores ImagePullSecret in a Kubernetes Secret"""
  handleCreateImagePullSecret(
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
    input: secret_ImagePullSecretSpec_Input!
  ): secret_Secret @httpOperation(subgraph: "api", path: "/api/v1/secret", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: POST, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
  """rollout restart of the Daemon Set"""
  handleStatefulSetRestart(
    """namespace of the StatefulSet"""
    namespace: String!
    """name of the StatefulSet"""
    statefulset: String!
    """
    Comma delimited string used to apply filtering: 'propertyName,filterValue'
    """
    filterBy: String
    """Name of the column to sort by"""
    sortBy: String
    """Number of items to return when pagination is applied"""
    itemsPerPage: String
    """Page number to return items from"""
    page: String
    """Metric names to download"""
    metricNames: String
    """Aggregations to be performed for each metric (default: sum)"""
    aggregations: String
  ): statefulset_StatefulSetDetail @httpOperation(subgraph: "api", path: "/api/v1/statefulset/{args.namespace}/{args.statefulset}/restart", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: PUT, queryParamArgMap: "{\"filterBy\":\"filterBy\",\"sortBy\":\"sortBy\",\"itemsPerPage\":\"itemsPerPage\",\"page\":\"page\",\"metricNames\":\"metricNames\",\"aggregations\":\"aggregations\"}")
}

"""Represents empty values"""
scalar Void

type deployment_AppDeploymentSpec {
  containerCommand: String!
  containerCommandArgs: String!
  containerImage: String!
  cpuRequirement: String!
  description: String!
  imagePullSecret: String!
  isExternal: Boolean!
  labels: [deployment_Label]!
  memoryRequirement: String!
  name: String!
  namespace: String!
  portMappings: [deployment_PortMapping]!
  replicas: Int!
  runAsPrivileged: Boolean!
  variables: [deployment_EnvironmentVariable]!
}

type deployment_Label {
  key: String!
  value: String!
}

type deployment_PortMapping {
  port: Int!
  protocol: String!
  targetPort: Int!
}

type deployment_EnvironmentVariable {
  name: String!
  value: String!
}

input deployment_AppDeploymentSpec_Input {
  containerCommand: String!
  containerCommandArgs: String!
  containerImage: String!
  cpuRequirement: resource_Quantity_Input5!
  description: String!
  imagePullSecret: String!
  isExternal: Boolean!
  labels: [deployment_Label_Input]!
  memoryRequirement: resource_Quantity_Input5!
  name: String!
  namespace: String!
  portMappings: [deployment_PortMapping_Input]!
  replicas: Int!
  runAsPrivileged: Boolean!
  variables: [deployment_EnvironmentVariable_Input]!
}

input resource_Quantity_Input5 {
  Format: String!
  d: resource_infDecAmount_Input!
  i: resource_int64Amount_Input!
  s: String!
}

input resource_infDecAmount_Input {
  Dec: inf_Dec_Input!
}

input inf_Dec_Input {
  scale: Int!
  unscaled: big_Int_Input!
}

input big_Int_Input {
  abs: [Int]!
  neg: Boolean!
}

input resource_int64Amount_Input {
  scale: Int!
  value: BigInt!
}

input deployment_Label_Input {
  key: String!
  value: String!
}

input deployment_PortMapping_Input {
  port: Int!
  protocol: String!
  targetPort: Int!
}

input deployment_EnvironmentVariable_Input {
  name: String!
  value: String!
}

type validation_ImageReferenceValidity {
  reason: String!
  valid: Boolean!
}

input validation_ImageReferenceValiditySpec_Input {
  reference: String!
}

type validation_AppNameValidity {
  valid: Boolean!
}

input validation_AppNameValiditySpec_Input {
  name: String!
  namespace: String!
}

type validation_ProtocolValidity {
  valid: Boolean!
}

input validation_ProtocolValiditySpec_Input {
  isExternal: Boolean!
  protocol: String!
}

type deployment_AppDeploymentFromFileResponse {
  content: String!
  error: String!
  name: String!
}

input deployment_AppDeploymentFromFileSpec_Input {
  content: String!
  name: String!
  namespace: String!
  validate: Boolean!
}

type deployment_RolloutSpec {
  revision: String!
}

input deployment_RolloutSpec_Input {
  revision: String!
}

type namespace_NamespaceSpec {
  name: String!
}

input namespace_NamespaceSpec_Input {
  name: String!
}

input node_NodeDrainSpec_Input {
  deleteEmptyDirData: Boolean
  force: Boolean
  gracePeriodSeconds: Int
  ignoreAllDaemonSets: Boolean
  timeout: BigInt
}

input replicationcontroller_ReplicationControllerSpec_Input {
  replicas: Int!
}

input secret_ImagePullSecretSpec_Input {
  data: String!
  name: String!
  namespace: String!
}

scalar ObjMap

enum HTTPMethod {
  GET
  HEAD
  POST
  PUT
  DELETE
  CONNECT
  OPTIONS
  TRACE
  PATCH
}

enum ContainerState {
  Waiting
  Running
  Terminated
  Failed
  Unknown
}

type Map {
  map: ObjMap!
}

type StringWrapper {
  string: String!
  optionalString: String
}

type StateWrapper {
  state: ContainerState!
}